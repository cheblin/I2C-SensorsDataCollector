//const assert = require('assert').strict; //https://nodejs.org/api/assert.html

import { org as _org } from './AdHoc';
import _Lib = _org.unirail.AdHoc;
import _Pack = _Lib.Pack;
import _Cursor = _Pack.Cursor;

import { org as _ad_hoc } from './Client';
import _Config = _ad_hoc.unirail.AdHoc.Config_;

import { org as _gen } from './Client';
import _Host_root = _gen.company;
import _Host = _gen.company.Client;

export namespace org.unirail {
    export namespace Test_ {
        import _Test = org.unirail.Test_;

        function assertFloatEqual(a: any, b: any) {
            if (a === b) return;

            if (a instanceof Array && b instanceof Array) {
                if (a.length !== b.length) throw new Error(`a.length=${a.length} !== b.length=${b.length}`);
                for (let i = 0, max = a.length; i < max; i++) if (Math.fround(a[i]) !== Math.fround(b[i])) throw new Error(`a[${i}]=${a} !== b[${i}]=${b}`);
                return;
            }
            let A = a[Symbol.iterator]?.();
            let B = b[Symbol.iterator]?.();
            if (A && B)
                for (let i = 0; ; i++) {
                    const A_next = A.next();
                    const B_next = B.next();
                    if (A_next.done === B_next.done)
                        if (A_next.done) return;
                        else if (Math.fround(A_next.value) === Math.fround(B_next.value)) continue;

                    throw new Error(`At index = ` + i + '\nA.done = ' + A_next.done + '\tA.value = ' + A_next.value + '\nB.done = ' + B_next.done + '\tB.value = ' + B_next.value);
                }

            if (Math.fround(a) !== Math.fround(b)) throw new Error(`a=${a} !== b=${b}`);
        }

        function assertEqual(a: any, b: any) {
            if (a === b) return;

            if (a instanceof Array && b instanceof Array) {
                if (a.length !== b.length) throw new Error(`a.length=${a.length} !== b.length=${b.length}`);
                for (let i = 0, max = a.length; i < max; i++) if (a[i] !== b[i]) throw new Error(`a[${i}]=${a} !== b[${i}]=${b}`);
                return;
            }

            let A = a[Symbol.iterator]?.();
            let B = b[Symbol.iterator]?.();
            if (A && B)
                for (let i = 0; ; i++) {
                    const A_next = A.next();
                    const B_next = B.next();
                    if (A_next.done === B_next.done)
                        if (A_next.done) return;
                        else if (A_next.value === B_next.value) continue;

                    throw new Error(`At index = ` + i + '\nA.done = ' + A_next.done + '\tA.value = ' + A_next.value + '\nB.done = ' + B_next.done + '\tB.value = ' + B_next.value);
                }

            throw new Error(`a=${a} !== b=${b}`);
        }

        export interface DeviceVersion {
            DevID(): number;
            DevID_(src: number);
            Ver(): number;
            Ver_(src: number);
        }

        export namespace DeviceVersion {
            class Impl_ extends _Cursor.View implements DeviceVersion {
                public DevID(): number {
                    return this.data_.bytes.getUint16(this.data_.origin + 0, true);
                }
                public DevID_(src: number) {
                    this.data_.bytes.setUint16(this.data_.origin + 0, src, true);
                }

                public Ver(): number {
                    return this.data_.bytes.getUint16(this.data_.origin + 2, true);
                }
                public Ver_(src: number) {
                    this.data_.bytes.setUint16(this.data_.origin + 2, src, true);
                }
            }

            export const impl_ = Impl_.prototype;

            export class Dst_adapter implements _Host.DeviceVersion.DST_ {
                constructor(public dst: DeviceVersion) {}
                public DevID_(src: number) {
                    this.dst.DevID_(src);
                }
                public Ver_(src: number) {
                    this.dst.Ver_(src);
                }
            }
        }
        export namespace BusConfiguration {
            export class Dst_adapter implements _Host.BusConfiguration.DST_ {
                constructor(public dst: _Host.BusConfiguration) {}
                public multiplier_(src: number) {
                    this.dst.multiplier_(src);
                }
                public time_(src: number) {
                    this.dst.time_(src);
                }
                public clk_khz_(src: number) {
                    this.dst.clk_khz_(src);
                }
            }

            export class Src_adapter implements _Host.BusConfiguration.SRC_ {
                constructor(public src: _Host.BusConfiguration) {}
                public multiplier(): number {
                    return this.src.multiplier();
                }
                public time(): number {
                    return this.src.time();
                }
                public clk_khz(): number {
                    return this.src.clk_khz();
                }
            }
        }
        export namespace InstructionsPack {
            export class Dst_adapter implements _Host.InstructionsPack.DST_ {
                constructor(public dst: _Host.InstructionsPack) {}
                public Length_(src: number) {
                    this.dst.Length_(src);
                }
                public Instructions_(src: _Host.InstructionsPack.Instructions) {
                    const item = this.dst.Instructions();
                    for (let i = 0; i < _Host.InstructionsPack.Instructions.item_len; i++) item.set(src.get(i), i);
                }
            }

            export class Src_adapter implements _Host.InstructionsPack.SRC_ {
                constructor(public src: _Host.InstructionsPack) {}
                public Length(): number {
                    return this.src.Length();
                }
                public Instructions(dst: _Host.InstructionsPack.Instructions) {
                    const item = this.src.Instructions();
                    for (let i = 0; i < _Host.InstructionsPack.Instructions.item_len; i++) dst.set(item.get(i), i);
                }
            }
        }
        export interface DeviceError {
            param1(): number;
            param1_(src: number);
            error_id(): _Host.Errors;
            error_id_(src: _Host.Errors);
        }

        export namespace DeviceError {
            class Impl_ extends _Cursor.View implements DeviceError {
                public param1(): number {
                    return this.data_.bytes.getUint16(this.data_.origin + 0, true);
                }
                public param1_(src: number) {
                    this.data_.bytes.setUint16(this.data_.origin + 0, src, true);
                }

                public error_id(): _Host.Errors {
                    return _Lib.get_bits(this.data_.bytes, this.data_.origin * 8 + 16, 1);
                }
                public error_id_(src: _Host.Errors) {
                    _Lib.set_bits(src, 1, this.data_.bytes, this.data_.origin * 8 + 16);
                }
            }

            export const impl_ = Impl_.prototype;

            export class Dst_adapter implements _Host.DeviceError.DST_ {
                constructor(public dst: DeviceError) {}
                public error_id_(src: _Host.Errors) {
                    this.dst.error_id_(src);
                }
                public param1_(src: number) {
                    this.dst.param1_(src);
                }
            }
        }
        export interface SensorsData {
            values(): SensorsData.values;
            values_(src: SensorsData.values | number[]);
            values$(src: Iterator<number>, len: number);
        }

        export namespace SensorsData {
            export interface values extends Iterable<number> {
                get(index: number);
                equals(other: this): boolean;
                equals(other: Iterator<number>): boolean;
                set(src: number, index: number);
            }
            export namespace values {
                export class Field extends _Cursor.View implements values, Iterable<number> {
                    public get(index: number): number {
                        return this.data_.bytes.getUint16(this.data_.origin + 0 + index * 2, true);
                    }

                    equals(other: Iterator<number>): boolean;
                    public equals(other: this): boolean;

                    equals(other): boolean {
                        if (other instanceof Field) return _Lib.ArrayEquals(this.data_.bytes.buffer, this.data_.origin + 0, other.data_.bytes.buffer, other.data_.origin + 0, _Host.SensorsData.values.item_len) === 0;
                        for (let i = 0; i < _Host.SensorsData.values.item_len; i++) {
                            let v = other.next();
                            if (v.done || v.value !== this.get(i)) return false;
                        }
                        return true;
                    }
                    [Symbol.iterator](): Iterator<number> {
                        const outer = this;
                        let index = 0;
                        const max = _Host.SensorsData.values.item_len;
                        return new (class implements Iterator<number> {
                            value: number;
                            done: boolean;

                            next(value?: any): IteratorResult<number> {
                                if ((this.done = index === max)) index = 0;
                                else this.value = outer.get(index++);
                                return this;
                            }
                        })();
                    }

                    public set(src: number, index: number) {
                        this.data_.bytes.setUint16(this.data_.origin + 0 + index * 2, src, true);
                    }
                }
                export const field = Field.prototype;

                export const item_len = 1000;
            }

            class Impl_ extends _Cursor.View implements SensorsData {
                public values(): SensorsData.values {
                    return this.data_.as_field(SensorsData.values.field);
                }
                public values_(src: SensorsData.values | number[]): values {
                    if (src instanceof Array) {
                        let len = Math.min(_Host.SensorsData.values.item_len, src.length);
                        for (let index = 0; index < len; index++) this.data_.bytes.setUint16(this.data_.origin + 0 + index * 2, src[index], true);
                        return this.data_.as_field(values.field);
                    }
                    for (let index = 0; index < _Host.SensorsData.values.item_len; index++) this.data_.bytes.setUint16(this.data_.origin + 0 + index * 2, src.get(index), true);

                    return this.data_.as_field(values.field);
                }

                public values$(src: Iterator<number>, len: number): values {
                    let len_ = Math.min(len, _Host.SensorsData.values.item_len);

                    len = Math.min(len, _Host.SensorsData.values.item_len);
                    if (src)
                        for (let index = 0; index < len; index++) {
                            let v = src.next();
                            if (v.done) break;
                            this.data_.bytes.setUint16(this.data_.origin + 0 + index * 2, v.value, true);
                        }
                    return this.data_.as_field(values.field);
                }
            }

            export const impl_ = Impl_.prototype;

            export class Dst_adapter implements _Host.SensorsData.DST_ {
                constructor(public dst: SensorsData) {}
                public values_(src: _Host.SensorsData.values) {
                    const item = this.dst.values();
                    for (let i = 0; i < _Host.SensorsData.values.item_len; i++) item.set(src.get(i), i);
                }
            }
        }

        namespace TestChannel {
            function dispatch(id: number, pack: _Pack): _Pack.Meta | null {
                switch (id) {
                    case 1:
                        if (!pack) return _Host.Stop.pack_.meta;
                        onStop();
                        return null;
                    case 2:
                        if (!pack) return _Host.Start.pack_.meta;
                        onStart();
                        return null;
                    case 3:
                        if (!pack) return _Host.GetDeviceVersion.pack_.meta;
                        onGetDeviceVersion();
                        return null;
                    case 4:
                        if (!pack) return _Host.GetConfiguration.pack_.meta;
                        onGetConfiguration();
                        return null;
                    case 5:
                        if (!pack) return _Host.SetConfiguration.pack_.meta;
                        onSetConfiguration();
                        return null;
                }
                return null;
            }
            class Receiver extends _Lib.Channel.Receiver {
                constructor() {
                    super(1, 1);
                }
                dispatch(id: number, pack: _Pack): _Pack.Meta | null {
                    return dispatch(id, pack);
                }
            }

            class ReceiverAdv extends _Lib.Channel.Receiver.Advanced {
                constructor() {
                    super(1, 1);
                }
                dispatch(id: number, pack: _Pack): _Pack.Meta | null {
                    return dispatch(id, pack);
                }
            }
            export const receiverStd = new Receiver();
            export const receiverAdv = new ReceiverAdv();

            let sendingPack: _Pack | null = null;

            class Transmitter extends _Lib.Channel.Transmitter {
                constructor() {
                    super(1, 1);
                }
                pullSendingPack(): _Pack | null {
                    let ret = sendingPack;
                    sendingPack = null;
                    return ret;
                }
            }
            class TransmitterAdv extends _Lib.Channel.Transmitter.Advanced {
                constructor() {
                    super(1, 1);
                }
                pullSendingPack(): _Pack | null {
                    let ret = sendingPack;
                    sendingPack = null;
                    return ret;
                }
            }
            export const transmitterStd = new Transmitter();
            export const transmitterAdv = new TransmitterAdv();

            export function send(src: _Host.DeviceVersion): boolean;

            export function send(src: _Host.DeviceError): boolean;

            export function send(src: _Host.SensorsData): boolean;

            export function send(src): boolean {
                if (sendingPack) return false;
                sendingPack = src.data_.unwrap();
                return true;
            }

            export namespace NEW {
                export function DeviceVersion(cur: _Cursor): _Test.DeviceVersion {
                    cur.wrap(_Host.DeviceVersion.meta_);
                    return cur.as_pack(_Test.DeviceVersion.impl_);
                }
                export function DeviceError(cur: _Cursor): _Test.DeviceError {
                    cur.wrap(_Host.DeviceError.meta_);
                    return cur.as_pack(_Test.DeviceError.impl_);
                }
                export function SensorsData(cur: _Cursor): _Test.SensorsData {
                    cur.wrap(_Host.SensorsData.meta_);
                    return cur.as_pack(_Test.SensorsData.impl_);
                }
            }
        }

        export function fill_DeviceVersion(p0: _Test.DeviceVersion) {
            p0.DevID_(54687);
            p0.Ver_(26608);
        }

        export function onDeviceVersion(p0: _Host.DeviceVersion) {
            assertEqual(p0.DevID(), 54687);
            assertEqual(p0.Ver(), 26608);
            console.info('DeviceVersion \n');
        }
        export function onStop() {
            console.info('Stop \n');
        }
        export function onStart() {
            console.info('Start \n');
        }
        export function onGetDeviceVersion() {
            console.info('GetDeviceVersion \n');
        }
        export function onGetConfiguration() {
            console.info('GetConfiguration \n');
        }
        export function onSetConfiguration() {
            console.info('SetConfiguration \n');
        }

        export function fill_BusConfiguration(p6: _Host.BusConfiguration) {
            p6.multiplier_(244);
            p6.time_(13548);
            p6.clk_khz_(22535);
        }

        export function onBusConfiguration(p6: _Host.BusConfiguration) {
            assertEqual(p6.multiplier(), 244);
            assertEqual(p6.time(), 13548);
            assertEqual(p6.clk_khz(), 22535);
            console.info('BusConfiguration \n');
        }

        export function fill_InstructionsPack(p7: _Host.InstructionsPack) {
            p7.Length_(42);
            p7.Instructions_([
                12,
                198,
                65,
                182,
                83,
                203,
                220,
                213,
                136,
                195,
                127,
                97,
                241,
                150,
                129,
                214,
                177,
                233,
                26,
                111,
                62,
                177,
                92,
                161,
                67,
                102,
                227,
                171,
                122,
                33,
                157,
                170,
                184,
                138,
                183,
                166,
                89,
                93,
                78,
                139,
                237,
                85,
                177,
                93,
                147,
                201,
                124,
                46,
                84,
                113,
                244,
                166,
                166,
                12,
                180,
                232,
                101,
                64,
                196,
                46,
                72,
                127,
                21,
                132,
                252,
                181,
                47,
                179,
                0,
                211,
                54,
                126,
                122,
                222,
                22,
                201,
                237,
                116,
                12,
                119,
                115,
                233,
                146,
                55,
                43,
                13,
                128,
                66,
                160,
                198,
                229,
                228,
                100,
                155,
                190,
                182,
                146,
                113,
                240,
                186,
                129,
                122,
                252,
                24,
                22,
                73,
                94,
                161,
                67,
                149,
                120,
                118,
                49,
                171,
                254,
                248,
                102,
                20,
                57,
                186,
                207,
                107,
                101,
                252,
                241,
                236,
                136,
                192,
                183,
                251,
                7,
                155,
                196,
                201,
                249,
                47,
                29,
                222,
                62,
                134,
                142,
                63,
                231,
                132,
                113,
                123,
                242,
                68,
                164,
                98,
                224,
                255,
                160,
                77,
                20,
                62,
                18,
                88,
                47,
                183,
                105,
                123,
                110,
                73,
                99,
                138,
                74,
                88,
                219,
                244,
                63,
                33,
                25,
                18,
                70,
                175,
                136,
                111,
                10,
                19,
                211,
                234,
                48,
                231,
                59,
                3,
                161,
                60,
                111,
                43,
                120,
                79,
                205,
                206,
                57,
                222,
                15,
                160,
                159,
                111,
                63,
                83,
                100,
                161,
                107,
                216,
                58,
                45,
                28,
                58,
                112,
                157,
                193,
                30,
                222,
                4,
                197,
                96,
                255,
                17,
                207,
                166,
                49,
                102,
                17,
                181,
                141,
                220,
                59,
                132,
                131,
                34,
                237,
                37,
                17,
                205,
                254,
                179,
                13,
                51,
                143,
                235,
                43,
                101,
                182,
                227,
                228,
                38,
                229,
                45,
                188,
                181,
                241,
                114,
                236,
                81
            ]);
        }

        export function onInstructionsPack(p7: _Host.InstructionsPack) {
            assertEqual(p7.Length(), 42);
            assertEqual(p7.Instructions(), [
                12,
                198,
                65,
                182,
                83,
                203,
                220,
                213,
                136,
                195,
                127,
                97,
                241,
                150,
                129,
                214,
                177,
                233,
                26,
                111,
                62,
                177,
                92,
                161,
                67,
                102,
                227,
                171,
                122,
                33,
                157,
                170,
                184,
                138,
                183,
                166,
                89,
                93,
                78,
                139,
                237,
                85,
                177,
                93,
                147,
                201,
                124,
                46,
                84,
                113,
                244,
                166,
                166,
                12,
                180,
                232,
                101,
                64,
                196,
                46,
                72,
                127,
                21,
                132,
                252,
                181,
                47,
                179,
                0,
                211,
                54,
                126,
                122,
                222,
                22,
                201,
                237,
                116,
                12,
                119,
                115,
                233,
                146,
                55,
                43,
                13,
                128,
                66,
                160,
                198,
                229,
                228,
                100,
                155,
                190,
                182,
                146,
                113,
                240,
                186,
                129,
                122,
                252,
                24,
                22,
                73,
                94,
                161,
                67,
                149,
                120,
                118,
                49,
                171,
                254,
                248,
                102,
                20,
                57,
                186,
                207,
                107,
                101,
                252,
                241,
                236,
                136,
                192,
                183,
                251,
                7,
                155,
                196,
                201,
                249,
                47,
                29,
                222,
                62,
                134,
                142,
                63,
                231,
                132,
                113,
                123,
                242,
                68,
                164,
                98,
                224,
                255,
                160,
                77,
                20,
                62,
                18,
                88,
                47,
                183,
                105,
                123,
                110,
                73,
                99,
                138,
                74,
                88,
                219,
                244,
                63,
                33,
                25,
                18,
                70,
                175,
                136,
                111,
                10,
                19,
                211,
                234,
                48,
                231,
                59,
                3,
                161,
                60,
                111,
                43,
                120,
                79,
                205,
                206,
                57,
                222,
                15,
                160,
                159,
                111,
                63,
                83,
                100,
                161,
                107,
                216,
                58,
                45,
                28,
                58,
                112,
                157,
                193,
                30,
                222,
                4,
                197,
                96,
                255,
                17,
                207,
                166,
                49,
                102,
                17,
                181,
                141,
                220,
                59,
                132,
                131,
                34,
                237,
                37,
                17,
                205,
                254,
                179,
                13,
                51,
                143,
                235,
                43,
                101,
                182,
                227,
                228,
                38,
                229,
                45,
                188,
                181,
                241,
                114,
                236,
                81
            ]);

            console.info('InstructionsPack \n');
        }

        export function fill_DeviceError(p8: _Test.DeviceError) {
            p8.param1_(62220);
            p8.error_id_(_Host.Errors.SensorsDataOverflow);
        }

        export function onDeviceError(p8: _Host.DeviceError) {
            assertEqual(p8.param1(), 62220);
            assertEqual(p8.error_id(), _Host.Errors.SensorsDataOverflow);
            console.info('DeviceError \n');
        }

        export function fill_SensorsData(p9: _Test.SensorsData) {
            p9.values_([
                2793,
                63947,
                59525,
                63384,
                23594,
                63442,
                8757,
                32978,
                57695,
                47811,
                7438,
                18982,
                20936,
                43167,
                1402,
                60913,
                10182,
                56432,
                63112,
                39475,
                33061,
                9792,
                13078,
                33060,
                27484,
                33534,
                31285,
                62603,
                13329,
                37415,
                42461,
                62696,
                13080,
                11583,
                22358,
                3001,
                3049,
                33216,
                63916,
                34503,
                51071,
                50331,
                30615,
                41012,
                35570,
                56858,
                38851,
                33463,
                34529,
                21123,
                45747,
                5538,
                22986,
                19439,
                50795,
                34056,
                25378,
                601,
                56327,
                61496,
                34265,
                31662,
                18819,
                8573,
                25844,
                62130,
                1375,
                30095,
                38745,
                12074,
                45188,
                28874,
                39038,
                25608,
                25669,
                13639,
                20104,
                20709,
                44777,
                1005,
                14474,
                40846,
                42872,
                39105,
                38602,
                34041,
                237,
                50412,
                10859,
                7396,
                1816,
                55998,
                58911,
                38496,
                19737,
                39933,
                16140,
                29613,
                20297,
                47397,
                29451,
                33596,
                27349,
                32938,
                53762,
                25393,
                23214,
                47173,
                53611,
                56768,
                63245,
                525,
                56,
                22567,
                27046,
                59757,
                59164,
                48612,
                11206,
                7975,
                27032,
                54645,
                37763,
                63403,
                14470,
                22052,
                34190,
                16013,
                20239,
                35025,
                39203,
                42807,
                28346,
                44035,
                47179,
                50756,
                42754,
                39493,
                65359,
                29437,
                32861,
                28503,
                8900,
                7449,
                5033,
                10946,
                52640,
                44102,
                11305,
                27509,
                34476,
                12653,
                27552,
                3563,
                6324,
                35944,
                3101,
                38179,
                22305,
                48070,
                11063,
                41248,
                55480,
                13173,
                65141,
                22058,
                18277,
                42362,
                1986,
                49366,
                33157,
                11137,
                24567,
                52127,
                47640,
                37252,
                39282,
                27880,
                46620,
                31441,
                26942,
                31303,
                49541,
                35930,
                56245,
                46417,
                49956,
                13290,
                22270,
                36939,
                60841,
                12100,
                8315,
                45946,
                34686,
                37923,
                6676,
                26407,
                45014,
                994,
                61644,
                8744,
                33743,
                6843,
                25156,
                17798,
                29164,
                53314,
                31399,
                10329,
                6217,
                12551,
                46659,
                51379,
                28633,
                35013,
                5275,
                7291,
                26412,
                56764,
                6350,
                56070,
                49123,
                4335,
                63816,
                3717,
                39657,
                3987,
                64446,
                44557,
                23366,
                50126,
                59644,
                8911,
                1131,
                39499,
                41348,
                56930,
                46792,
                17444,
                15707,
                6332,
                58361,
                49713,
                16559,
                32694,
                1069,
                53083,
                49045,
                16184,
                21737,
                2923,
                60729,
                25328,
                31985,
                32221,
                37181,
                8260,
                26154,
                58944,
                61427,
                37212,
                34240,
                44502,
                35816,
                16517,
                6602,
                26913,
                24659,
                55859,
                26161,
                7779,
                17281,
                38738,
                371,
                54070,
                52721,
                32843,
                43232,
                7932,
                533,
                11386,
                20108,
                33898,
                41958,
                2430,
                18202,
                41827,
                25953,
                53651,
                1931,
                5269,
                63902,
                1629,
                26465,
                20928,
                60305,
                22197,
                43862,
                11986,
                27944,
                29690,
                41031,
                3570,
                42918,
                52664,
                53441,
                55961,
                7838,
                59035,
                12149,
                8586,
                62198,
                13789,
                6841,
                33768,
                50473,
                35831,
                42979,
                62689,
                34229,
                28264,
                6034,
                45931,
                46794,
                63796,
                22038,
                55755,
                42476,
                64720,
                25268,
                39889,
                55500,
                31454,
                61463,
                1889,
                12421,
                44466,
                34523,
                4544,
                60449,
                24942,
                14327,
                61910,
                41446,
                8011,
                4390,
                49890,
                64785,
                37024,
                14533,
                23346,
                4967,
                27193,
                22540,
                17408,
                47912,
                47626,
                39524,
                30616,
                4416,
                15003,
                22061,
                13391,
                13569,
                60173,
                59265,
                58924,
                4934,
                27718,
                49276,
                45686,
                27146,
                34029,
                30052,
                31648,
                37447,
                31791,
                62287,
                52418,
                53050,
                62067,
                9372,
                26687,
                38332,
                46272,
                19152,
                40270,
                24843,
                967,
                40262,
                47484,
                49560,
                37778,
                18,
                59962,
                11632,
                31061,
                29178,
                13402,
                16384,
                8323,
                38470,
                12335,
                39083,
                58152,
                23229,
                11349,
                29244,
                29154,
                30780,
                13075,
                12752,
                27153,
                5140,
                62361,
                61053,
                53855,
                34735,
                61132,
                29367,
                47831,
                35763,
                54829,
                30632,
                61724,
                21436,
                46501,
                17493,
                20810,
                22135,
                60948,
                22294,
                41079,
                40087,
                11451,
                9784,
                62372,
                1770,
                32788,
                22051,
                15792,
                19655,
                37582,
                52523,
                51333,
                60596,
                46070,
                25456,
                10104,
                19984,
                23590,
                63318,
                20087,
                39070,
                59955,
                35236,
                23980,
                46950,
                23320,
                55313,
                19511,
                21525,
                44270,
                26357,
                25962,
                41549,
                9906,
                54148,
                30557,
                46244,
                34876,
                41747,
                2050,
                14131,
                12132,
                37192,
                47700,
                63327,
                768,
                9931,
                49733,
                57068,
                14042,
                47519,
                22031,
                65356,
                14125,
                29158,
                15918,
                60051,
                10677,
                45604,
                4957,
                45390,
                46502,
                51650,
                58966,
                7819,
                49063,
                47017,
                48843,
                36844,
                13230,
                32428,
                57675,
                23882,
                16797,
                8218,
                48008,
                10933,
                60771,
                32319,
                35305,
                22443,
                45021,
                20375,
                125,
                65166,
                6216,
                37268,
                44091,
                18126,
                40621,
                31352,
                36128,
                64360,
                27656,
                41956,
                16746,
                24121,
                21173,
                56755,
                33854,
                17853,
                34691,
                17755,
                56499,
                28361,
                11686,
                1151,
                39617,
                42364,
                15456,
                831,
                40474,
                31106,
                65359,
                5464,
                59179,
                9167,
                43067,
                39237,
                20080,
                27917,
                26003,
                53731,
                9750,
                64374,
                38941,
                20130,
                24508,
                1704,
                58035,
                38705,
                11446,
                39221,
                29021,
                30193,
                65287,
                31291,
                53227,
                56864,
                38849,
                13307,
                34016,
                44298,
                24661,
                65009,
                60162,
                2931,
                30003,
                39673,
                53195,
                57008,
                46367,
                5931,
                22980,
                21516,
                1765,
                17143,
                44325,
                45843,
                19121,
                26449,
                32972,
                23932,
                19401,
                1409,
                19711,
                38857,
                30157,
                40983,
                17933,
                36091,
                46095,
                16434,
                13955,
                48940,
                48089,
                28560,
                10543,
                5305,
                5558,
                33824,
                3772,
                50424,
                53438,
                56898,
                47336,
                56320,
                55800,
                50185,
                4137,
                40130,
                1677,
                10079,
                14254,
                7197,
                9132,
                58149,
                57809,
                10658,
                23608,
                37458,
                56517,
                26428,
                15279,
                9983,
                35085,
                33963,
                11664,
                61503,
                25361,
                38000,
                8019,
                26434,
                31756,
                45402,
                33968,
                19154,
                18926,
                17706,
                6048,
                35785,
                8415,
                11632,
                4942,
                12079,
                25151,
                19571,
                45973,
                24786,
                28679,
                42406,
                17606,
                43131,
                29844,
                25173,
                2925,
                10373,
                28515,
                29219,
                1915,
                34691,
                19842,
                46226,
                31181,
                60814,
                58564,
                44293,
                32659,
                54166,
                53461,
                27013,
                48699,
                12425,
                9197,
                58208,
                7581,
                5941,
                43587,
                46688,
                4458,
                2623,
                57744,
                16974,
                10069,
                17609,
                30112,
                51933,
                62087,
                63553,
                43250,
                7915,
                20118,
                29663,
                38021,
                47392,
                42818,
                1356,
                49571,
                59078,
                23215,
                20985,
                25675,
                54290,
                7085,
                46972,
                45993,
                47670,
                50285,
                56822,
                18863,
                33217,
                12168,
                46633,
                30921,
                4263,
                59628,
                7179,
                63168,
                62741,
                1604,
                18655,
                54276,
                14071,
                47361,
                36866,
                36644,
                57228,
                54514,
                16230,
                25981,
                35690,
                61602,
                34313,
                62768,
                43034,
                17173,
                29934,
                38924,
                53060,
                61280,
                3643,
                63784,
                8833,
                37316,
                52940,
                41789,
                50813,
                40839,
                53375,
                29471,
                5242,
                52249,
                28888,
                29440,
                49381,
                58898,
                56202,
                11248,
                9662,
                2315,
                48586,
                35254,
                27209,
                46585,
                64733,
                16172,
                11072,
                34625,
                12647,
                33989,
                4001,
                9117,
                11314,
                14348,
                21563,
                12583,
                15153,
                9362,
                2423,
                7980,
                54886,
                56492,
                36853,
                12997,
                31632,
                190,
                16390,
                9075,
                16593,
                65125,
                14788,
                64480,
                9172,
                51403,
                42227,
                40648,
                34483,
                41007,
                12925,
                16230,
                63226,
                40611,
                33988,
                15370,
                8833,
                53786,
                22636,
                11790,
                27960,
                23141,
                43326,
                57193,
                15764,
                49868,
                10367,
                54899,
                42655,
                33427,
                59546,
                23275,
                56294,
                24081,
                31016,
                5172,
                40481,
                22880,
                34577,
                28832,
                62273,
                54975,
                38079,
                33809,
                61020,
                28753,
                36725,
                40266,
                26162,
                52607,
                33215,
                13813,
                55891,
                24255,
                4735,
                7751,
                3899,
                5060,
                12456,
                1666,
                9389,
                49090,
                18978,
                35684,
                48709,
                63901,
                13706,
                42009,
                43275,
                37873,
                32161,
                1939,
                15381,
                11493,
                41459,
                15714,
                45351,
                40154,
                5483,
                25670,
                30317,
                3109,
                56744,
                60972,
                27074,
                55286,
                32063,
                5038,
                49720,
                55884,
                44853,
                14286,
                4083,
                14926,
                49178,
                53989,
                19205,
                53185,
                53144,
                42547,
                62647,
                56766,
                41450,
                44644,
                6533,
                42814,
                4743,
                42860,
                61538,
                40940,
                15145,
                15473,
                26896,
                22151,
                22678,
                30527,
                52521,
                403,
                54822,
                37792,
                22745,
                441,
                41860,
                44664,
                27727,
                57394,
                46963,
                8387,
                26905,
                14312,
                46134,
                29248,
                43379,
                34240,
                21560,
                25327,
                26858,
                40621,
                65177,
                10569,
                29636,
                51876,
                54024,
                56344,
                35571,
                34121,
                63256,
                36792,
                31585,
                38757,
                19647,
                8425,
                13703,
                5629,
                31202,
                21273,
                19724,
                4051,
                28971,
                16154,
                5440,
                20821,
                29971,
                43355,
                59405,
                39471,
                27104,
                59920,
                19052,
                28216,
                46777,
                23155,
                18342,
                34846,
                64862,
                3593,
                40582,
                59460,
                23141,
                40243,
                38980,
                8615,
                38390,
                19442,
                57589,
                37380,
                57803,
                28846,
                57902,
                41042,
                5237,
                14805,
                18581,
                60151,
                35550,
                12141,
                48049,
                10082
            ]);
        }

        export function onSensorsData(p9: _Host.SensorsData) {
            assertEqual(p9.values(), [
                2793,
                63947,
                59525,
                63384,
                23594,
                63442,
                8757,
                32978,
                57695,
                47811,
                7438,
                18982,
                20936,
                43167,
                1402,
                60913,
                10182,
                56432,
                63112,
                39475,
                33061,
                9792,
                13078,
                33060,
                27484,
                33534,
                31285,
                62603,
                13329,
                37415,
                42461,
                62696,
                13080,
                11583,
                22358,
                3001,
                3049,
                33216,
                63916,
                34503,
                51071,
                50331,
                30615,
                41012,
                35570,
                56858,
                38851,
                33463,
                34529,
                21123,
                45747,
                5538,
                22986,
                19439,
                50795,
                34056,
                25378,
                601,
                56327,
                61496,
                34265,
                31662,
                18819,
                8573,
                25844,
                62130,
                1375,
                30095,
                38745,
                12074,
                45188,
                28874,
                39038,
                25608,
                25669,
                13639,
                20104,
                20709,
                44777,
                1005,
                14474,
                40846,
                42872,
                39105,
                38602,
                34041,
                237,
                50412,
                10859,
                7396,
                1816,
                55998,
                58911,
                38496,
                19737,
                39933,
                16140,
                29613,
                20297,
                47397,
                29451,
                33596,
                27349,
                32938,
                53762,
                25393,
                23214,
                47173,
                53611,
                56768,
                63245,
                525,
                56,
                22567,
                27046,
                59757,
                59164,
                48612,
                11206,
                7975,
                27032,
                54645,
                37763,
                63403,
                14470,
                22052,
                34190,
                16013,
                20239,
                35025,
                39203,
                42807,
                28346,
                44035,
                47179,
                50756,
                42754,
                39493,
                65359,
                29437,
                32861,
                28503,
                8900,
                7449,
                5033,
                10946,
                52640,
                44102,
                11305,
                27509,
                34476,
                12653,
                27552,
                3563,
                6324,
                35944,
                3101,
                38179,
                22305,
                48070,
                11063,
                41248,
                55480,
                13173,
                65141,
                22058,
                18277,
                42362,
                1986,
                49366,
                33157,
                11137,
                24567,
                52127,
                47640,
                37252,
                39282,
                27880,
                46620,
                31441,
                26942,
                31303,
                49541,
                35930,
                56245,
                46417,
                49956,
                13290,
                22270,
                36939,
                60841,
                12100,
                8315,
                45946,
                34686,
                37923,
                6676,
                26407,
                45014,
                994,
                61644,
                8744,
                33743,
                6843,
                25156,
                17798,
                29164,
                53314,
                31399,
                10329,
                6217,
                12551,
                46659,
                51379,
                28633,
                35013,
                5275,
                7291,
                26412,
                56764,
                6350,
                56070,
                49123,
                4335,
                63816,
                3717,
                39657,
                3987,
                64446,
                44557,
                23366,
                50126,
                59644,
                8911,
                1131,
                39499,
                41348,
                56930,
                46792,
                17444,
                15707,
                6332,
                58361,
                49713,
                16559,
                32694,
                1069,
                53083,
                49045,
                16184,
                21737,
                2923,
                60729,
                25328,
                31985,
                32221,
                37181,
                8260,
                26154,
                58944,
                61427,
                37212,
                34240,
                44502,
                35816,
                16517,
                6602,
                26913,
                24659,
                55859,
                26161,
                7779,
                17281,
                38738,
                371,
                54070,
                52721,
                32843,
                43232,
                7932,
                533,
                11386,
                20108,
                33898,
                41958,
                2430,
                18202,
                41827,
                25953,
                53651,
                1931,
                5269,
                63902,
                1629,
                26465,
                20928,
                60305,
                22197,
                43862,
                11986,
                27944,
                29690,
                41031,
                3570,
                42918,
                52664,
                53441,
                55961,
                7838,
                59035,
                12149,
                8586,
                62198,
                13789,
                6841,
                33768,
                50473,
                35831,
                42979,
                62689,
                34229,
                28264,
                6034,
                45931,
                46794,
                63796,
                22038,
                55755,
                42476,
                64720,
                25268,
                39889,
                55500,
                31454,
                61463,
                1889,
                12421,
                44466,
                34523,
                4544,
                60449,
                24942,
                14327,
                61910,
                41446,
                8011,
                4390,
                49890,
                64785,
                37024,
                14533,
                23346,
                4967,
                27193,
                22540,
                17408,
                47912,
                47626,
                39524,
                30616,
                4416,
                15003,
                22061,
                13391,
                13569,
                60173,
                59265,
                58924,
                4934,
                27718,
                49276,
                45686,
                27146,
                34029,
                30052,
                31648,
                37447,
                31791,
                62287,
                52418,
                53050,
                62067,
                9372,
                26687,
                38332,
                46272,
                19152,
                40270,
                24843,
                967,
                40262,
                47484,
                49560,
                37778,
                18,
                59962,
                11632,
                31061,
                29178,
                13402,
                16384,
                8323,
                38470,
                12335,
                39083,
                58152,
                23229,
                11349,
                29244,
                29154,
                30780,
                13075,
                12752,
                27153,
                5140,
                62361,
                61053,
                53855,
                34735,
                61132,
                29367,
                47831,
                35763,
                54829,
                30632,
                61724,
                21436,
                46501,
                17493,
                20810,
                22135,
                60948,
                22294,
                41079,
                40087,
                11451,
                9784,
                62372,
                1770,
                32788,
                22051,
                15792,
                19655,
                37582,
                52523,
                51333,
                60596,
                46070,
                25456,
                10104,
                19984,
                23590,
                63318,
                20087,
                39070,
                59955,
                35236,
                23980,
                46950,
                23320,
                55313,
                19511,
                21525,
                44270,
                26357,
                25962,
                41549,
                9906,
                54148,
                30557,
                46244,
                34876,
                41747,
                2050,
                14131,
                12132,
                37192,
                47700,
                63327,
                768,
                9931,
                49733,
                57068,
                14042,
                47519,
                22031,
                65356,
                14125,
                29158,
                15918,
                60051,
                10677,
                45604,
                4957,
                45390,
                46502,
                51650,
                58966,
                7819,
                49063,
                47017,
                48843,
                36844,
                13230,
                32428,
                57675,
                23882,
                16797,
                8218,
                48008,
                10933,
                60771,
                32319,
                35305,
                22443,
                45021,
                20375,
                125,
                65166,
                6216,
                37268,
                44091,
                18126,
                40621,
                31352,
                36128,
                64360,
                27656,
                41956,
                16746,
                24121,
                21173,
                56755,
                33854,
                17853,
                34691,
                17755,
                56499,
                28361,
                11686,
                1151,
                39617,
                42364,
                15456,
                831,
                40474,
                31106,
                65359,
                5464,
                59179,
                9167,
                43067,
                39237,
                20080,
                27917,
                26003,
                53731,
                9750,
                64374,
                38941,
                20130,
                24508,
                1704,
                58035,
                38705,
                11446,
                39221,
                29021,
                30193,
                65287,
                31291,
                53227,
                56864,
                38849,
                13307,
                34016,
                44298,
                24661,
                65009,
                60162,
                2931,
                30003,
                39673,
                53195,
                57008,
                46367,
                5931,
                22980,
                21516,
                1765,
                17143,
                44325,
                45843,
                19121,
                26449,
                32972,
                23932,
                19401,
                1409,
                19711,
                38857,
                30157,
                40983,
                17933,
                36091,
                46095,
                16434,
                13955,
                48940,
                48089,
                28560,
                10543,
                5305,
                5558,
                33824,
                3772,
                50424,
                53438,
                56898,
                47336,
                56320,
                55800,
                50185,
                4137,
                40130,
                1677,
                10079,
                14254,
                7197,
                9132,
                58149,
                57809,
                10658,
                23608,
                37458,
                56517,
                26428,
                15279,
                9983,
                35085,
                33963,
                11664,
                61503,
                25361,
                38000,
                8019,
                26434,
                31756,
                45402,
                33968,
                19154,
                18926,
                17706,
                6048,
                35785,
                8415,
                11632,
                4942,
                12079,
                25151,
                19571,
                45973,
                24786,
                28679,
                42406,
                17606,
                43131,
                29844,
                25173,
                2925,
                10373,
                28515,
                29219,
                1915,
                34691,
                19842,
                46226,
                31181,
                60814,
                58564,
                44293,
                32659,
                54166,
                53461,
                27013,
                48699,
                12425,
                9197,
                58208,
                7581,
                5941,
                43587,
                46688,
                4458,
                2623,
                57744,
                16974,
                10069,
                17609,
                30112,
                51933,
                62087,
                63553,
                43250,
                7915,
                20118,
                29663,
                38021,
                47392,
                42818,
                1356,
                49571,
                59078,
                23215,
                20985,
                25675,
                54290,
                7085,
                46972,
                45993,
                47670,
                50285,
                56822,
                18863,
                33217,
                12168,
                46633,
                30921,
                4263,
                59628,
                7179,
                63168,
                62741,
                1604,
                18655,
                54276,
                14071,
                47361,
                36866,
                36644,
                57228,
                54514,
                16230,
                25981,
                35690,
                61602,
                34313,
                62768,
                43034,
                17173,
                29934,
                38924,
                53060,
                61280,
                3643,
                63784,
                8833,
                37316,
                52940,
                41789,
                50813,
                40839,
                53375,
                29471,
                5242,
                52249,
                28888,
                29440,
                49381,
                58898,
                56202,
                11248,
                9662,
                2315,
                48586,
                35254,
                27209,
                46585,
                64733,
                16172,
                11072,
                34625,
                12647,
                33989,
                4001,
                9117,
                11314,
                14348,
                21563,
                12583,
                15153,
                9362,
                2423,
                7980,
                54886,
                56492,
                36853,
                12997,
                31632,
                190,
                16390,
                9075,
                16593,
                65125,
                14788,
                64480,
                9172,
                51403,
                42227,
                40648,
                34483,
                41007,
                12925,
                16230,
                63226,
                40611,
                33988,
                15370,
                8833,
                53786,
                22636,
                11790,
                27960,
                23141,
                43326,
                57193,
                15764,
                49868,
                10367,
                54899,
                42655,
                33427,
                59546,
                23275,
                56294,
                24081,
                31016,
                5172,
                40481,
                22880,
                34577,
                28832,
                62273,
                54975,
                38079,
                33809,
                61020,
                28753,
                36725,
                40266,
                26162,
                52607,
                33215,
                13813,
                55891,
                24255,
                4735,
                7751,
                3899,
                5060,
                12456,
                1666,
                9389,
                49090,
                18978,
                35684,
                48709,
                63901,
                13706,
                42009,
                43275,
                37873,
                32161,
                1939,
                15381,
                11493,
                41459,
                15714,
                45351,
                40154,
                5483,
                25670,
                30317,
                3109,
                56744,
                60972,
                27074,
                55286,
                32063,
                5038,
                49720,
                55884,
                44853,
                14286,
                4083,
                14926,
                49178,
                53989,
                19205,
                53185,
                53144,
                42547,
                62647,
                56766,
                41450,
                44644,
                6533,
                42814,
                4743,
                42860,
                61538,
                40940,
                15145,
                15473,
                26896,
                22151,
                22678,
                30527,
                52521,
                403,
                54822,
                37792,
                22745,
                441,
                41860,
                44664,
                27727,
                57394,
                46963,
                8387,
                26905,
                14312,
                46134,
                29248,
                43379,
                34240,
                21560,
                25327,
                26858,
                40621,
                65177,
                10569,
                29636,
                51876,
                54024,
                56344,
                35571,
                34121,
                63256,
                36792,
                31585,
                38757,
                19647,
                8425,
                13703,
                5629,
                31202,
                21273,
                19724,
                4051,
                28971,
                16154,
                5440,
                20821,
                29971,
                43355,
                59405,
                39471,
                27104,
                59920,
                19052,
                28216,
                46777,
                23155,
                18342,
                34846,
                64862,
                3593,
                40582,
                59460,
                23141,
                40243,
                38980,
                8615,
                38390,
                19442,
                57589,
                37380,
                57803,
                28846,
                57902,
                41042,
                5237,
                14805,
                18581,
                60151,
                35550,
                12141,
                48049,
                10082
            ]);

            console.info('SensorsData \n');
        }

        class Communication_test extends _Host_root.Communication {
            onDeviceVersion(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onDeviceVersion(cur.as_pack(_Host.DeviceVersion.impl_));
            }
            onBusConfiguration(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onBusConfiguration(cur.as_pack(_Host.BusConfiguration.impl_));
            }
            onInstructionsPack(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onInstructionsPack(cur.as_pack(_Host.InstructionsPack.impl_));
            }
            onDeviceError(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onDeviceError(cur.as_pack(_Host.DeviceError.impl_));
            }
            onSensorsData(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onSensorsData(cur.as_pack(_Host.SensorsData.impl_));
            }
            sendingPack: _Pack | null = null;
            pullSendingPack(): _Pack | null {
                let pack = this.sendingPack;
                this.sendingPack = null;
                return pack;
            }
            pushSendingPack(pack: _Pack): boolean {
                if (this.sendingPack) return false;
                this.sendingPack = pack;
                return true;
            }
        }

        export function Main() {
            let cur = _Config.Cursor();
            let cur_dst = _Config.Cursor();
            let Communication_instance = new Communication_test();

            console.info('-------------------- DeviceVersion -------------------------');

            fill_DeviceVersion(TestChannel.NEW.DeviceVersion(cur));
            let p0 = cur.as_pack(_Host.DeviceVersion.impl_);
            onDeviceVersion(p0);
            {
                cur_dst.wrap(_Host.DeviceVersion.meta_);
                let dst = cur_dst.as_pack(_Test.DeviceVersion.impl_);
                _Host.DeviceVersion.push_(p0, new DeviceVersion.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);
            }

            if (TestChannel.send(p0)) _Lib.Channel.bytes_transfer(TestChannel.transmitterStd, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- Stop -------------------------');

            if (Communication_instance.sendStop()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- Start -------------------------');

            if (Communication_instance.sendStart()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- GetDeviceVersion -------------------------');

            if (Communication_instance.sendGetDeviceVersion()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- GetConfiguration -------------------------');

            if (Communication_instance.sendGetConfiguration()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- SetConfiguration -------------------------');

            if (Communication_instance.sendSetConfiguration()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- BusConfiguration -------------------------');

            let p6 = _Host_root.Communication.NEW.BusConfiguration(cur);
            fill_BusConfiguration(p6);
            onBusConfiguration(p6);
            {
                let dst = _Host_root.Communication.NEW.BusConfiguration(cur_dst);
                _Host.BusConfiguration.push_(p6, new BusConfiguration.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);

                dst = _Host_root.Communication.NEW.BusConfiguration(cur_dst);
                _Host.BusConfiguration.pull_(new BusConfiguration.Src_adapter(p6), dst);
                const problem2 = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem2) throw new Error('not equals at ' + problem2);
            }

            if (Communication_instance.send(p6)) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- InstructionsPack -------------------------');

            let p7 = _Host_root.Communication.NEW.InstructionsPack(cur);
            fill_InstructionsPack(p7);
            onInstructionsPack(p7);
            {
                let dst = _Host_root.Communication.NEW.InstructionsPack(cur_dst);
                _Host.InstructionsPack.push_(p7, new InstructionsPack.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);

                dst = _Host_root.Communication.NEW.InstructionsPack(cur_dst);
                _Host.InstructionsPack.pull_(new InstructionsPack.Src_adapter(p7), dst);
                const problem2 = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem2) throw new Error('not equals at ' + problem2);
            }

            if (Communication_instance.send(p7)) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- DeviceError -------------------------');

            fill_DeviceError(TestChannel.NEW.DeviceError(cur));
            let p8 = cur.as_pack(_Host.DeviceError.impl_);
            onDeviceError(p8);
            {
                cur_dst.wrap(_Host.DeviceError.meta_);
                let dst = cur_dst.as_pack(_Test.DeviceError.impl_);
                _Host.DeviceError.push_(p8, new DeviceError.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);
            }

            if (TestChannel.send(p8)) _Lib.Channel.bytes_transfer(TestChannel.transmitterStd, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- SensorsData -------------------------');

            fill_SensorsData(TestChannel.NEW.SensorsData(cur));
            let p9 = cur.as_pack(_Host.SensorsData.impl_);
            onSensorsData(p9);
            {
                cur_dst.wrap(_Host.SensorsData.meta_);
                let dst = cur_dst.as_pack(_Test.SensorsData.impl_);
                _Host.SensorsData.push_(p9, new SensorsData.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);
            }

            if (TestChannel.send(p9)) _Lib.Channel.bytes_transfer(TestChannel.transmitterStd, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');
        }
    }
}
org.unirail.Test_.Main();
