//const assert = require('assert').strict; //https://nodejs.org/api/assert.html

import { org as _org } from './AdHoc';
import _Lib = _org.unirail.AdHoc;
import _Pack = _Lib.Pack;
import _Cursor = _Pack.Cursor;

import { org as _ad_hoc } from './Client';
import _Config = _ad_hoc.unirail.AdHoc.Config_;

import { org as _gen } from './Client';
import _Host_root = _gen.company;
import _Host = _gen.company.Client;

export namespace org.unirail {
    export namespace Test_ {
        import _Test = org.unirail.Test_;

        function assertFloatEqual(a: any, b: any) {
            if (a === b) return;

            if (a instanceof Array && b instanceof Array) {
                if (a.length !== b.length) throw new Error(`a.length=${a.length} !== b.length=${b.length}`);
                for (let i = 0, max = a.length; i < max; i++) if (Math.fround(a[i]) !== Math.fround(b[i])) throw new Error(`a[${i}]=${a} !== b[${i}]=${b}`);
                return;
            }
            let A = a[Symbol.iterator]?.();
            let B = b[Symbol.iterator]?.();
            if (A && B)
                for (let i = 0; ; i++) {
                    const A_next = A.next();
                    const B_next = B.next();
                    if (A_next.done === B_next.done)
                        if (A_next.done) return;
                        else if (Math.fround(A_next.value) === Math.fround(B_next.value)) continue;

                    throw new Error(`At index = ` + i + '\nA.done = ' + A_next.done + '\tA.value = ' + A_next.value + '\nB.done = ' + B_next.done + '\tB.value = ' + B_next.value);
                }

            if (Math.fround(a) !== Math.fround(b)) throw new Error(`a=${a} !== b=${b}`);
        }

        function assertEqual(a: any, b: any) {
            if (a === b) return;

            if (a instanceof Array && b instanceof Array) {
                if (a.length !== b.length) throw new Error(`a.length=${a.length} !== b.length=${b.length}`);
                for (let i = 0, max = a.length; i < max; i++) if (a[i] !== b[i]) throw new Error(`a[${i}]=${a} !== b[${i}]=${b}`);
                return;
            }

            let A = a[Symbol.iterator]?.();
            let B = b[Symbol.iterator]?.();
            if (A && B)
                for (let i = 0; ; i++) {
                    const A_next = A.next();
                    const B_next = B.next();
                    if (A_next.done === B_next.done)
                        if (A_next.done) return;
                        else if (A_next.value === B_next.value) continue;

                    throw new Error(`At index = ` + i + '\nA.done = ' + A_next.done + '\tA.value = ' + A_next.value + '\nB.done = ' + B_next.done + '\tB.value = ' + B_next.value);
                }

            throw new Error(`a=${a} !== b=${b}`);
        }

        export interface DeviceVersion {
            DevID(): number;
            DevID_(src: number);
            Ver(): number;
            Ver_(src: number);
        }

        export namespace DeviceVersion {
            class Impl_ extends _Cursor.View implements DeviceVersion {
                public DevID(): number {
                    return this.data_.bytes.getUint16(this.data_.origin + 0, true);
                }
                public DevID_(src: number) {
                    this.data_.bytes.setUint16(this.data_.origin + 0, src, true);
                }

                public Ver(): number {
                    return this.data_.bytes.getUint16(this.data_.origin + 2, true);
                }
                public Ver_(src: number) {
                    this.data_.bytes.setUint16(this.data_.origin + 2, src, true);
                }
            }

            export const impl_ = Impl_.prototype;

            export class Dst_adapter implements _Host.DeviceVersion.DST_ {
                constructor(public dst: DeviceVersion) {}
                public DevID_(src: number) {
                    this.dst.DevID_(src);
                }
                public Ver_(src: number) {
                    this.dst.Ver_(src);
                }
            }
        }
        export namespace BusConfiguration {
            export class Dst_adapter implements _Host.BusConfiguration.DST_ {
                constructor(public dst: _Host.BusConfiguration) {}
                public multiplier_(src: number) {
                    this.dst.multiplier_(src);
                }
                public time_(src: number) {
                    this.dst.time_(src);
                }
                public clk_khz_(src: number) {
                    this.dst.clk_khz_(src);
                }
            }

            export class Src_adapter implements _Host.BusConfiguration.SRC_ {
                constructor(public src: _Host.BusConfiguration) {}
                public multiplier(): number {
                    return this.src.multiplier();
                }
                public time(): number {
                    return this.src.time();
                }
                public clk_khz(): number {
                    return this.src.clk_khz();
                }
            }
        }
        export namespace InstructionsPack {
            export class Dst_adapter implements _Host.InstructionsPack.DST_ {
                constructor(public dst: _Host.InstructionsPack) {}
                public Length_(src: number) {
                    this.dst.Length_(src);
                }
                public Instructions_(src: _Host.InstructionsPack.Instructions) {
                    const item = this.dst.Instructions();
                    for (let i = 0; i < _Host.InstructionsPack.Instructions.item_len; i++) item.set(src.get(i), i);
                }
            }

            export class Src_adapter implements _Host.InstructionsPack.SRC_ {
                constructor(public src: _Host.InstructionsPack) {}
                public Length(): number {
                    return this.src.Length();
                }
                public Instructions(dst: _Host.InstructionsPack.Instructions) {
                    const item = this.src.Instructions();
                    for (let i = 0; i < _Host.InstructionsPack.Instructions.item_len; i++) dst.set(item.get(i), i);
                }
            }
        }
        export interface DeviceError {
            param1(): number;
            param1_(src: number);
            error_id(): _Host.Errors;
            error_id_(src: _Host.Errors);
        }

        export namespace DeviceError {
            class Impl_ extends _Cursor.View implements DeviceError {
                public param1(): number {
                    return this.data_.bytes.getUint16(this.data_.origin + 0, true);
                }
                public param1_(src: number) {
                    this.data_.bytes.setUint16(this.data_.origin + 0, src, true);
                }

                public error_id(): _Host.Errors {
                    return _Lib.get_bits(this.data_.bytes, this.data_.origin * 8 + 16, 1);
                }
                public error_id_(src: _Host.Errors) {
                    _Lib.set_bits(src, 1, this.data_.bytes, this.data_.origin * 8 + 16);
                }
            }

            export const impl_ = Impl_.prototype;

            export class Dst_adapter implements _Host.DeviceError.DST_ {
                constructor(public dst: DeviceError) {}
                public error_id_(src: _Host.Errors) {
                    this.dst.error_id_(src);
                }
                public param1_(src: number) {
                    this.dst.param1_(src);
                }
            }
        }
        export interface SensorsData {
            values(): SensorsData.values;
            values_(src: SensorsData.values | number[]);
            values$(src: Iterator<number>, len: number);
        }

        export namespace SensorsData {
            export interface values extends Iterable<number> {
                get(index: number);
                equals(other: this): boolean;
                equals(other: Iterator<number>): boolean;
                set(src: number, index: number);
            }
            export namespace values {
                export class Field extends _Cursor.View implements values, Iterable<number> {
                    public get(index: number): number {
                        return this.data_.bytes.getUint16(this.data_.origin + 0 + index * 2, true);
                    }

                    equals(other: Iterator<number>): boolean;
                    public equals(other: this): boolean;

                    equals(other): boolean {
                        if (other instanceof Field) return _Lib.ArrayEquals(this.data_.bytes.buffer, this.data_.origin + 0, other.data_.bytes.buffer, other.data_.origin + 0, _Host.SensorsData.values.item_len) === 0;
                        for (let i = 0; i < _Host.SensorsData.values.item_len; i++) {
                            let v = other.next();
                            if (v.done || v.value !== this.get(i)) return false;
                        }
                        return true;
                    }
                    [Symbol.iterator](): Iterator<number> {
                        const outer = this;
                        let index = 0;
                        const max = _Host.SensorsData.values.item_len;
                        return new (class implements Iterator<number> {
                            value: number;
                            done: boolean;

                            next(value?: any): IteratorResult<number> {
                                if ((this.done = index === max)) index = 0;
                                else this.value = outer.get(index++);
                                return this;
                            }
                        })();
                    }

                    public set(src: number, index: number) {
                        this.data_.bytes.setUint16(this.data_.origin + 0 + index * 2, src, true);
                    }
                }
                export const field = Field.prototype;

                export const item_len = 1000;
            }

            class Impl_ extends _Cursor.View implements SensorsData {
                public values(): SensorsData.values {
                    return this.data_.as_field(SensorsData.values.field);
                }
                public values_(src: SensorsData.values | number[]): values {
                    if (src instanceof Array) {
                        let len = Math.min(_Host.SensorsData.values.item_len, src.length);
                        for (let index = 0; index < len; index++) this.data_.bytes.setUint16(this.data_.origin + 0 + index * 2, src[index], true);
                        return this.data_.as_field(values.field);
                    }
                    for (let index = 0; index < _Host.SensorsData.values.item_len; index++) this.data_.bytes.setUint16(this.data_.origin + 0 + index * 2, src.get(index), true);

                    return this.data_.as_field(values.field);
                }

                public values$(src: Iterator<number>, len: number): values {
                    let len_ = Math.min(len, _Host.SensorsData.values.item_len);

                    len = Math.min(len, _Host.SensorsData.values.item_len);
                    if (src)
                        for (let index = 0; index < len; index++) {
                            let v = src.next();
                            if (v.done) break;
                            this.data_.bytes.setUint16(this.data_.origin + 0 + index * 2, v.value, true);
                        }
                    return this.data_.as_field(values.field);
                }
            }

            export const impl_ = Impl_.prototype;

            export class Dst_adapter implements _Host.SensorsData.DST_ {
                constructor(public dst: SensorsData) {}
                public values_(src: _Host.SensorsData.values) {
                    const item = this.dst.values();
                    for (let i = 0; i < _Host.SensorsData.values.item_len; i++) item.set(src.get(i), i);
                }
            }
        }

        namespace TestChannel {
            function dispatch(id: number, pack: _Pack): _Pack.Meta | null {
                switch (id) {
                    case 1:
                        if (!pack) return _Host.Stop.pack_.meta;
                        onStop();
                        return null;
                    case 2:
                        if (!pack) return _Host.Start.pack_.meta;
                        onStart();
                        return null;
                    case 3:
                        if (!pack) return _Host.GetDeviceVersion.pack_.meta;
                        onGetDeviceVersion();
                        return null;
                    case 4:
                        if (!pack) return _Host.GetConfiguration.pack_.meta;
                        onGetConfiguration();
                        return null;
                    case 5:
                        if (!pack) return _Host.SetConfiguration.pack_.meta;
                        onSetConfiguration();
                        return null;
                }
                return null;
            }
            class Receiver extends _Lib.Channel.Receiver {
                constructor() {
                    super(1, 1);
                }
                dispatch(id: number, pack: _Pack): _Pack.Meta | null {
                    return dispatch(id, pack);
                }
            }

            class ReceiverAdv extends _Lib.Channel.Receiver.Advanced {
                constructor() {
                    super(1, 1);
                }
                dispatch(id: number, pack: _Pack): _Pack.Meta | null {
                    return dispatch(id, pack);
                }
            }
            export const receiverStd = new Receiver();
            export const receiverAdv = new ReceiverAdv();

            let sendingPack: _Pack | null = null;

            class Transmitter extends _Lib.Channel.Transmitter {
                constructor() {
                    super(1, 1);
                }
                pullSendingPack(): _Pack | null {
                    let ret = sendingPack;
                    sendingPack = null;
                    return ret;
                }
            }
            class TransmitterAdv extends _Lib.Channel.Transmitter.Advanced {
                constructor() {
                    super(1, 1);
                }
                pullSendingPack(): _Pack | null {
                    let ret = sendingPack;
                    sendingPack = null;
                    return ret;
                }
            }
            export const transmitterStd = new Transmitter();
            export const transmitterAdv = new TransmitterAdv();

            export function send(src: _Host.DeviceVersion): boolean;

            export function send(src: _Host.DeviceError): boolean;

            export function send(src: _Host.SensorsData): boolean;

            export function send(src): boolean {
                if (sendingPack) return false;
                sendingPack = src.data_.unwrap();
                return true;
            }

            export namespace NEW {
                export function DeviceVersion(cur: _Cursor): _Test.DeviceVersion {
                    cur.wrap(_Host.DeviceVersion.meta_);
                    return cur.as_pack(_Test.DeviceVersion.impl_);
                }
                export function DeviceError(cur: _Cursor): _Test.DeviceError {
                    cur.wrap(_Host.DeviceError.meta_);
                    return cur.as_pack(_Test.DeviceError.impl_);
                }
                export function SensorsData(cur: _Cursor): _Test.SensorsData {
                    cur.wrap(_Host.SensorsData.meta_);
                    return cur.as_pack(_Test.SensorsData.impl_);
                }
            }
        }

        export function fill_DeviceVersion(p0: _Test.DeviceVersion) {
            p0.DevID_(37254);
            p0.Ver_(18581);
        }

        export function onDeviceVersion(p0: _Host.DeviceVersion) {
            assertEqual(p0.DevID(), 37254);
            assertEqual(p0.Ver(), 18581);
            console.info('DeviceVersion \n');
        }
        export function onStop() {
            console.info('Stop \n');
        }
        export function onStart() {
            console.info('Start \n');
        }
        export function onGetDeviceVersion() {
            console.info('GetDeviceVersion \n');
        }
        export function onGetConfiguration() {
            console.info('GetConfiguration \n');
        }
        export function onSetConfiguration() {
            console.info('SetConfiguration \n');
        }

        export function fill_BusConfiguration(p6: _Host.BusConfiguration) {
            p6.multiplier_(87);
            p6.time_(49815);
            p6.clk_khz_(41059);
        }

        export function onBusConfiguration(p6: _Host.BusConfiguration) {
            assertEqual(p6.multiplier(), 87);
            assertEqual(p6.time(), 49815);
            assertEqual(p6.clk_khz(), 41059);
            console.info('BusConfiguration \n');
        }

        export function fill_InstructionsPack(p7: _Host.InstructionsPack) {
            p7.Length_(159);
            p7.Instructions_([
                191,
                92,
                142,
                14,
                166,
                80,
                133,
                102,
                9,
                68,
                240,
                134,
                48,
                193,
                29,
                1,
                217,
                176,
                142,
                41,
                232,
                229,
                101,
                70,
                216,
                39,
                105,
                155,
                141,
                96,
                97,
                197,
                196,
                87,
                136,
                173,
                126,
                164,
                111,
                112,
                93,
                62,
                221,
                182,
                59,
                248,
                204,
                100,
                242,
                80,
                106,
                16,
                84,
                231,
                20,
                126,
                38,
                37,
                190,
                182,
                192,
                209,
                117,
                113,
                243,
                170,
                28,
                109,
                169,
                49,
                39,
                12,
                158,
                114,
                151,
                45,
                143,
                229,
                221,
                7,
                99,
                88,
                41,
                62,
                34,
                227,
                44,
                65,
                186,
                152,
                151,
                171,
                167,
                241,
                67,
                175,
                211,
                108,
                5,
                245,
                68,
                97,
                142,
                139,
                182,
                220,
                237,
                225,
                89,
                229,
                116,
                5,
                188,
                205,
                59,
                115,
                184,
                220,
                221,
                243,
                179,
                67,
                250,
                215,
                168,
                73,
                79,
                156,
                53,
                138,
                67,
                206,
                54,
                100,
                93,
                223,
                65,
                55,
                175,
                238,
                200,
                189,
                215,
                76,
                212,
                2,
                34,
                20,
                46,
                126,
                45,
                42,
                241,
                237,
                29,
                240,
                7,
                189,
                76,
                54,
                148,
                9,
                61,
                181,
                181,
                172,
                185,
                19,
                165,
                50,
                109,
                224,
                43,
                96,
                230,
                111,
                143,
                99,
                86,
                212,
                250,
                81,
                212,
                0,
                24,
                189,
                226,
                105,
                243,
                3,
                131,
                84,
                59,
                158,
                88,
                73,
                22,
                96,
                181,
                2,
                173,
                99,
                181,
                92,
                247,
                112,
                105,
                52,
                251,
                174,
                44,
                241,
                121,
                211,
                90,
                116,
                153,
                98,
                211,
                31,
                106,
                41,
                4,
                178,
                55,
                221,
                195,
                46,
                215,
                27,
                200,
                232,
                138,
                213,
                121,
                23,
                165,
                248,
                40,
                78,
                233,
                150,
                111,
                132,
                214,
                62,
                203,
                127,
                25,
                79,
                252,
                185,
                75,
                134,
                47,
                144
            ]);
        }

        export function onInstructionsPack(p7: _Host.InstructionsPack) {
            assertEqual(p7.Length(), 159);
            assertEqual(p7.Instructions(), [
                191,
                92,
                142,
                14,
                166,
                80,
                133,
                102,
                9,
                68,
                240,
                134,
                48,
                193,
                29,
                1,
                217,
                176,
                142,
                41,
                232,
                229,
                101,
                70,
                216,
                39,
                105,
                155,
                141,
                96,
                97,
                197,
                196,
                87,
                136,
                173,
                126,
                164,
                111,
                112,
                93,
                62,
                221,
                182,
                59,
                248,
                204,
                100,
                242,
                80,
                106,
                16,
                84,
                231,
                20,
                126,
                38,
                37,
                190,
                182,
                192,
                209,
                117,
                113,
                243,
                170,
                28,
                109,
                169,
                49,
                39,
                12,
                158,
                114,
                151,
                45,
                143,
                229,
                221,
                7,
                99,
                88,
                41,
                62,
                34,
                227,
                44,
                65,
                186,
                152,
                151,
                171,
                167,
                241,
                67,
                175,
                211,
                108,
                5,
                245,
                68,
                97,
                142,
                139,
                182,
                220,
                237,
                225,
                89,
                229,
                116,
                5,
                188,
                205,
                59,
                115,
                184,
                220,
                221,
                243,
                179,
                67,
                250,
                215,
                168,
                73,
                79,
                156,
                53,
                138,
                67,
                206,
                54,
                100,
                93,
                223,
                65,
                55,
                175,
                238,
                200,
                189,
                215,
                76,
                212,
                2,
                34,
                20,
                46,
                126,
                45,
                42,
                241,
                237,
                29,
                240,
                7,
                189,
                76,
                54,
                148,
                9,
                61,
                181,
                181,
                172,
                185,
                19,
                165,
                50,
                109,
                224,
                43,
                96,
                230,
                111,
                143,
                99,
                86,
                212,
                250,
                81,
                212,
                0,
                24,
                189,
                226,
                105,
                243,
                3,
                131,
                84,
                59,
                158,
                88,
                73,
                22,
                96,
                181,
                2,
                173,
                99,
                181,
                92,
                247,
                112,
                105,
                52,
                251,
                174,
                44,
                241,
                121,
                211,
                90,
                116,
                153,
                98,
                211,
                31,
                106,
                41,
                4,
                178,
                55,
                221,
                195,
                46,
                215,
                27,
                200,
                232,
                138,
                213,
                121,
                23,
                165,
                248,
                40,
                78,
                233,
                150,
                111,
                132,
                214,
                62,
                203,
                127,
                25,
                79,
                252,
                185,
                75,
                134,
                47,
                144
            ]);

            console.info('InstructionsPack \n');
        }

        export function fill_DeviceError(p8: _Test.DeviceError) {
            p8.param1_(58407);
            p8.error_id_(_Host.Errors.CannotReadSensor);
        }

        export function onDeviceError(p8: _Host.DeviceError) {
            assertEqual(p8.param1(), 58407);
            assertEqual(p8.error_id(), _Host.Errors.CannotReadSensor);
            console.info('DeviceError \n');
        }

        export function fill_SensorsData(p9: _Test.SensorsData) {
            p9.values_([
                9497,
                20914,
                3194,
                36060,
                62807,
                8387,
                15842,
                45907,
                60738,
                55367,
                26557,
                61399,
                35700,
                28812,
                20659,
                38107,
                263,
                55658,
                21490,
                23874,
                52159,
                1038,
                11227,
                20720,
                28274,
                28153,
                25223,
                38571,
                12196,
                53682,
                31297,
                9129,
                30297,
                46476,
                63937,
                40552,
                35633,
                26242,
                59694,
                48061,
                52066,
                55789,
                57450,
                38134,
                38412,
                8751,
                63991,
                6851,
                63218,
                31047,
                31740,
                42642,
                5951,
                17134,
                30756,
                42915,
                45262,
                15418,
                43953,
                10581,
                55327,
                58570,
                50651,
                20792,
                26042,
                24052,
                7965,
                27712,
                19906,
                3596,
                34741,
                41031,
                42011,
                15301,
                49852,
                54697,
                13714,
                24787,
                49848,
                25542,
                34348,
                48322,
                7270,
                52158,
                51807,
                63426,
                57162,
                34507,
                7024,
                23542,
                35661,
                50645,
                1872,
                16172,
                50954,
                38456,
                11582,
                41639,
                35048,
                41317,
                3019,
                33819,
                32225,
                9452,
                59392,
                8918,
                62556,
                37666,
                57742,
                33927,
                64901,
                56318,
                30654,
                14937,
                34626,
                52839,
                30472,
                10127,
                60926,
                16931,
                16099,
                49416,
                2168,
                11407,
                25523,
                14165,
                21742,
                38940,
                60228,
                50888,
                30723,
                19170,
                51511,
                44664,
                30715,
                1924,
                47080,
                18740,
                29756,
                27819,
                17482,
                11403,
                11016,
                39391,
                5493,
                2302,
                35161,
                46383,
                51369,
                16653,
                53925,
                13615,
                34212,
                63991,
                16075,
                40280,
                27583,
                54866,
                61681,
                53354,
                38762,
                21214,
                21071,
                15423,
                2910,
                1318,
                55104,
                34708,
                32089,
                53047,
                3069,
                39486,
                18635,
                22774,
                23469,
                15899,
                46521,
                64860,
                41129,
                12483,
                13714,
                14810,
                16735,
                35684,
                45333,
                16813,
                61225,
                6827,
                16263,
                45711,
                56236,
                6406,
                43290,
                29497,
                36171,
                53308,
                4807,
                8119,
                60528,
                46401,
                28093,
                12124,
                9259,
                23928,
                32838,
                63182,
                26436,
                61179,
                56574,
                54067,
                52612,
                61778,
                62596,
                31939,
                3458,
                49263,
                27,
                36922,
                57136,
                39941,
                65368,
                23596,
                15636,
                53642,
                64413,
                63678,
                42649,
                63446,
                26879,
                8379,
                58964,
                13031,
                35830,
                39988,
                2178,
                4300,
                50971,
                8339,
                28419,
                19234,
                35770,
                4180,
                46498,
                63194,
                3696,
                13102,
                54563,
                54754,
                17766,
                9615,
                29678,
                27267,
                45707,
                21252,
                2018,
                31591,
                48879,
                17511,
                44210,
                40754,
                21854,
                17875,
                22090,
                4724,
                32412,
                57353,
                31702,
                56683,
                65198,
                62234,
                58958,
                33682,
                34485,
                48399,
                1012,
                45738,
                968,
                8669,
                58996,
                27193,
                48118,
                51437,
                31876,
                26086,
                24335,
                31760,
                64853,
                4149,
                45212,
                12674,
                51378,
                47231,
                9407,
                57174,
                51344,
                18681,
                27254,
                50605,
                35696,
                26355,
                37758,
                34564,
                65385,
                30278,
                51405,
                25262,
                45915,
                61252,
                6251,
                24007,
                45279,
                33293,
                589,
                2042,
                16257,
                55454,
                46349,
                29679,
                23173,
                35414,
                26838,
                41616,
                28583,
                8472,
                17647,
                26381,
                19006,
                39263,
                34572,
                7473,
                38129,
                33613,
                2847,
                1021,
                53379,
                56615,
                10428,
                44710,
                9997,
                624,
                40640,
                14038,
                46467,
                37851,
                24376,
                8628,
                2349,
                59890,
                16474,
                61322,
                65288,
                10708,
                8156,
                41322,
                19447,
                34462,
                36528,
                51695,
                8394,
                50778,
                17138,
                40769,
                47031,
                50213,
                3227,
                55977,
                65342,
                16980,
                59412,
                62663,
                46043,
                55047,
                25009,
                9344,
                55028,
                27345,
                13155,
                51150,
                9592,
                2729,
                26419,
                3813,
                20301,
                38355,
                7319,
                59714,
                24031,
                44323,
                8725,
                19367,
                47826,
                27831,
                61928,
                62837,
                2941,
                49808,
                30749,
                5529,
                12081,
                50814,
                41909,
                54473,
                47869,
                43734,
                38741,
                2193,
                34470,
                5634,
                25210,
                8778,
                28669,
                3784,
                38085,
                18952,
                2546,
                61692,
                38913,
                35318,
                41891,
                52283,
                50146,
                44793,
                48911,
                22535,
                34622,
                40385,
                60740,
                24343,
                30990,
                27760,
                53886,
                51641,
                19258,
                22422,
                54721,
                10334,
                32376,
                19404,
                27529,
                19871,
                15066,
                25251,
                935,
                42931,
                56157,
                42649,
                3669,
                38874,
                57530,
                62637,
                17177,
                25373,
                1637,
                54086,
                7520,
                34440,
                41760,
                17048,
                999,
                53864,
                46203,
                33525,
                14213,
                21868,
                7735,
                26718,
                54961,
                39266,
                3582,
                40373,
                18751,
                59976,
                18083,
                6805,
                50877,
                8796,
                1630,
                24713,
                34762,
                52335,
                48163,
                65453,
                18457,
                33964,
                45172,
                63135,
                25197,
                7301,
                20862,
                64339,
                42378,
                59673,
                18918,
                57249,
                57855,
                7660,
                28401,
                8465,
                16878,
                44026,
                8678,
                29888,
                11782,
                11956,
                54965,
                14054,
                12026,
                56607,
                21257,
                33167,
                6931,
                43514,
                35508,
                27519,
                19157,
                13023,
                12897,
                61455,
                4489,
                56815,
                57422,
                28499,
                46269,
                31171,
                1713,
                48607,
                10351,
                53024,
                45474,
                8587,
                42118,
                46786,
                62192,
                21391,
                59342,
                35603,
                45335,
                13759,
                26427,
                64338,
                21168,
                54497,
                40640,
                16069,
                53180,
                49441,
                45182,
                21122,
                36394,
                35871,
                5131,
                24970,
                20537,
                52300,
                24876,
                59440,
                58885,
                56999,
                56743,
                14655,
                27763,
                23530,
                5347,
                19993,
                35384,
                14455,
                18476,
                32640,
                19009,
                29510,
                19031,
                21419,
                46380,
                28326,
                62002,
                13850,
                20716,
                4438,
                30880,
                37525,
                32065,
                38674,
                4406,
                59318,
                52128,
                57832,
                3864,
                13796,
                51831,
                13414,
                41963,
                38557,
                47917,
                32313,
                45009,
                41198,
                22782,
                14605,
                48232,
                61014,
                42360,
                19514,
                29972,
                31783,
                34119,
                41243,
                23435,
                52872,
                27721,
                10381,
                34887,
                64489,
                597,
                51540,
                40304,
                50560,
                63228,
                19792,
                12720,
                38233,
                63776,
                63668,
                31463,
                28831,
                18448,
                57795,
                8085,
                28980,
                12287,
                30227,
                25671,
                35046,
                54559,
                13011,
                2673,
                35382,
                36694,
                41477,
                61412,
                63041,
                17961,
                51111,
                5455,
                10110,
                30183,
                50932,
                4146,
                480,
                33064,
                15154,
                45021,
                61226,
                25113,
                62608,
                22033,
                38535,
                35744,
                2217,
                56773,
                41426,
                51294,
                23145,
                63125,
                43335,
                40049,
                8417,
                14476,
                1925,
                55659,
                18732,
                6748,
                29899,
                40760,
                6040,
                1418,
                61196,
                3550,
                618,
                26181,
                23826,
                48042,
                12566,
                12087,
                30639,
                41980,
                63866,
                59841,
                28969,
                64590,
                63492,
                43729,
                59218,
                64730,
                42203,
                20020,
                61109,
                6497,
                51932,
                30202,
                11393,
                59391,
                57946,
                48,
                3176,
                50317,
                52881,
                8061,
                60633,
                36840,
                3081,
                14522,
                3403,
                289,
                23919,
                5425,
                57438,
                16526,
                64598,
                59884,
                32857,
                11101,
                58526,
                64380,
                27086,
                23580,
                49285,
                65017,
                2380,
                7059,
                35690,
                38909,
                10982,
                7009,
                14838,
                64421,
                44042,
                21647,
                12963,
                50130,
                7284,
                1631,
                39460,
                18765,
                39293,
                35944,
                41591,
                25001,
                39010,
                2054,
                8054,
                8597,
                7442,
                14070,
                41496,
                37294,
                24709,
                51915,
                16239,
                15282,
                41514,
                36319,
                194,
                61902,
                2765,
                4527,
                12621,
                15157,
                32613,
                42764,
                42941,
                2742,
                8037,
                24764,
                2997,
                37317,
                31383,
                41988,
                51745,
                50649,
                5672,
                37885,
                57607,
                57323,
                34430,
                23325,
                37369,
                48868,
                52998,
                49335,
                2118,
                34024,
                44055,
                26986,
                51243,
                56175,
                55196,
                33123,
                33203,
                39166,
                39668,
                47747,
                59172,
                41219,
                64724,
                31920,
                53781,
                3397,
                41093,
                12002,
                856,
                29718,
                10183,
                53240,
                26823,
                31665,
                13968,
                29289,
                30937,
                65294,
                314,
                62045,
                11451,
                62534,
                47101,
                54810,
                4738,
                46638,
                38402,
                42334,
                6331,
                25105,
                57626,
                19273,
                27941,
                55524,
                29552,
                11037,
                24651,
                32870,
                34059,
                51846,
                65071,
                55516,
                35519,
                19484,
                17516,
                41532,
                32467,
                51136,
                41797,
                14379,
                24710,
                6804,
                61592,
                1236,
                63943,
                25589,
                56286,
                51508,
                50287,
                35732,
                38632,
                41059,
                13003,
                5538,
                31589,
                48213,
                60082,
                1332,
                5720,
                27728,
                32817,
                60323,
                8325,
                3124,
                55596,
                15237,
                5878,
                46171,
                44201,
                34287,
                50477,
                42676,
                13553,
                31416,
                24083,
                3165,
                39662,
                19341,
                24490,
                46621,
                62596,
                1941,
                55039,
                23671,
                17177,
                58430,
                52439,
                29988,
                1498,
                16813,
                11053,
                63975,
                48272,
                58504,
                2324,
                2703,
                56731,
                17842,
                46265,
                45618,
                12494,
                36895,
                22390,
                5922,
                33973,
                13801,
                14283,
                30244,
                6601,
                21313,
                38870,
                1538,
                55017,
                14849,
                23377,
                28513,
                58159,
                28992,
                14527,
                31310,
                57028,
                53190,
                38342,
                50137,
                1851,
                12733,
                17544,
                14870,
                39261,
                40355,
                41068,
                61279,
                43701,
                42157,
                51666,
                38122,
                32907,
                46195,
                32647,
                32384,
                61681,
                43646,
                58983,
                16311,
                49162,
                62126,
                16550,
                34835,
                11173,
                43234,
                57477,
                9439,
                714,
                26518,
                42813,
                3921,
                10127,
                7150,
                26587,
                46212,
                44390,
                44509,
                44102,
                50253,
                58261,
                26603,
                45636,
                25587,
                32484,
                4590,
                28411,
                51458,
                57353,
                11808,
                25958,
                50722,
                7863,
                37457,
                13515,
                26963,
                20825,
                31743,
                61132,
                33497,
                27307,
                75,
                60587,
                16710,
                40504
            ]);
        }

        export function onSensorsData(p9: _Host.SensorsData) {
            assertEqual(p9.values(), [
                9497,
                20914,
                3194,
                36060,
                62807,
                8387,
                15842,
                45907,
                60738,
                55367,
                26557,
                61399,
                35700,
                28812,
                20659,
                38107,
                263,
                55658,
                21490,
                23874,
                52159,
                1038,
                11227,
                20720,
                28274,
                28153,
                25223,
                38571,
                12196,
                53682,
                31297,
                9129,
                30297,
                46476,
                63937,
                40552,
                35633,
                26242,
                59694,
                48061,
                52066,
                55789,
                57450,
                38134,
                38412,
                8751,
                63991,
                6851,
                63218,
                31047,
                31740,
                42642,
                5951,
                17134,
                30756,
                42915,
                45262,
                15418,
                43953,
                10581,
                55327,
                58570,
                50651,
                20792,
                26042,
                24052,
                7965,
                27712,
                19906,
                3596,
                34741,
                41031,
                42011,
                15301,
                49852,
                54697,
                13714,
                24787,
                49848,
                25542,
                34348,
                48322,
                7270,
                52158,
                51807,
                63426,
                57162,
                34507,
                7024,
                23542,
                35661,
                50645,
                1872,
                16172,
                50954,
                38456,
                11582,
                41639,
                35048,
                41317,
                3019,
                33819,
                32225,
                9452,
                59392,
                8918,
                62556,
                37666,
                57742,
                33927,
                64901,
                56318,
                30654,
                14937,
                34626,
                52839,
                30472,
                10127,
                60926,
                16931,
                16099,
                49416,
                2168,
                11407,
                25523,
                14165,
                21742,
                38940,
                60228,
                50888,
                30723,
                19170,
                51511,
                44664,
                30715,
                1924,
                47080,
                18740,
                29756,
                27819,
                17482,
                11403,
                11016,
                39391,
                5493,
                2302,
                35161,
                46383,
                51369,
                16653,
                53925,
                13615,
                34212,
                63991,
                16075,
                40280,
                27583,
                54866,
                61681,
                53354,
                38762,
                21214,
                21071,
                15423,
                2910,
                1318,
                55104,
                34708,
                32089,
                53047,
                3069,
                39486,
                18635,
                22774,
                23469,
                15899,
                46521,
                64860,
                41129,
                12483,
                13714,
                14810,
                16735,
                35684,
                45333,
                16813,
                61225,
                6827,
                16263,
                45711,
                56236,
                6406,
                43290,
                29497,
                36171,
                53308,
                4807,
                8119,
                60528,
                46401,
                28093,
                12124,
                9259,
                23928,
                32838,
                63182,
                26436,
                61179,
                56574,
                54067,
                52612,
                61778,
                62596,
                31939,
                3458,
                49263,
                27,
                36922,
                57136,
                39941,
                65368,
                23596,
                15636,
                53642,
                64413,
                63678,
                42649,
                63446,
                26879,
                8379,
                58964,
                13031,
                35830,
                39988,
                2178,
                4300,
                50971,
                8339,
                28419,
                19234,
                35770,
                4180,
                46498,
                63194,
                3696,
                13102,
                54563,
                54754,
                17766,
                9615,
                29678,
                27267,
                45707,
                21252,
                2018,
                31591,
                48879,
                17511,
                44210,
                40754,
                21854,
                17875,
                22090,
                4724,
                32412,
                57353,
                31702,
                56683,
                65198,
                62234,
                58958,
                33682,
                34485,
                48399,
                1012,
                45738,
                968,
                8669,
                58996,
                27193,
                48118,
                51437,
                31876,
                26086,
                24335,
                31760,
                64853,
                4149,
                45212,
                12674,
                51378,
                47231,
                9407,
                57174,
                51344,
                18681,
                27254,
                50605,
                35696,
                26355,
                37758,
                34564,
                65385,
                30278,
                51405,
                25262,
                45915,
                61252,
                6251,
                24007,
                45279,
                33293,
                589,
                2042,
                16257,
                55454,
                46349,
                29679,
                23173,
                35414,
                26838,
                41616,
                28583,
                8472,
                17647,
                26381,
                19006,
                39263,
                34572,
                7473,
                38129,
                33613,
                2847,
                1021,
                53379,
                56615,
                10428,
                44710,
                9997,
                624,
                40640,
                14038,
                46467,
                37851,
                24376,
                8628,
                2349,
                59890,
                16474,
                61322,
                65288,
                10708,
                8156,
                41322,
                19447,
                34462,
                36528,
                51695,
                8394,
                50778,
                17138,
                40769,
                47031,
                50213,
                3227,
                55977,
                65342,
                16980,
                59412,
                62663,
                46043,
                55047,
                25009,
                9344,
                55028,
                27345,
                13155,
                51150,
                9592,
                2729,
                26419,
                3813,
                20301,
                38355,
                7319,
                59714,
                24031,
                44323,
                8725,
                19367,
                47826,
                27831,
                61928,
                62837,
                2941,
                49808,
                30749,
                5529,
                12081,
                50814,
                41909,
                54473,
                47869,
                43734,
                38741,
                2193,
                34470,
                5634,
                25210,
                8778,
                28669,
                3784,
                38085,
                18952,
                2546,
                61692,
                38913,
                35318,
                41891,
                52283,
                50146,
                44793,
                48911,
                22535,
                34622,
                40385,
                60740,
                24343,
                30990,
                27760,
                53886,
                51641,
                19258,
                22422,
                54721,
                10334,
                32376,
                19404,
                27529,
                19871,
                15066,
                25251,
                935,
                42931,
                56157,
                42649,
                3669,
                38874,
                57530,
                62637,
                17177,
                25373,
                1637,
                54086,
                7520,
                34440,
                41760,
                17048,
                999,
                53864,
                46203,
                33525,
                14213,
                21868,
                7735,
                26718,
                54961,
                39266,
                3582,
                40373,
                18751,
                59976,
                18083,
                6805,
                50877,
                8796,
                1630,
                24713,
                34762,
                52335,
                48163,
                65453,
                18457,
                33964,
                45172,
                63135,
                25197,
                7301,
                20862,
                64339,
                42378,
                59673,
                18918,
                57249,
                57855,
                7660,
                28401,
                8465,
                16878,
                44026,
                8678,
                29888,
                11782,
                11956,
                54965,
                14054,
                12026,
                56607,
                21257,
                33167,
                6931,
                43514,
                35508,
                27519,
                19157,
                13023,
                12897,
                61455,
                4489,
                56815,
                57422,
                28499,
                46269,
                31171,
                1713,
                48607,
                10351,
                53024,
                45474,
                8587,
                42118,
                46786,
                62192,
                21391,
                59342,
                35603,
                45335,
                13759,
                26427,
                64338,
                21168,
                54497,
                40640,
                16069,
                53180,
                49441,
                45182,
                21122,
                36394,
                35871,
                5131,
                24970,
                20537,
                52300,
                24876,
                59440,
                58885,
                56999,
                56743,
                14655,
                27763,
                23530,
                5347,
                19993,
                35384,
                14455,
                18476,
                32640,
                19009,
                29510,
                19031,
                21419,
                46380,
                28326,
                62002,
                13850,
                20716,
                4438,
                30880,
                37525,
                32065,
                38674,
                4406,
                59318,
                52128,
                57832,
                3864,
                13796,
                51831,
                13414,
                41963,
                38557,
                47917,
                32313,
                45009,
                41198,
                22782,
                14605,
                48232,
                61014,
                42360,
                19514,
                29972,
                31783,
                34119,
                41243,
                23435,
                52872,
                27721,
                10381,
                34887,
                64489,
                597,
                51540,
                40304,
                50560,
                63228,
                19792,
                12720,
                38233,
                63776,
                63668,
                31463,
                28831,
                18448,
                57795,
                8085,
                28980,
                12287,
                30227,
                25671,
                35046,
                54559,
                13011,
                2673,
                35382,
                36694,
                41477,
                61412,
                63041,
                17961,
                51111,
                5455,
                10110,
                30183,
                50932,
                4146,
                480,
                33064,
                15154,
                45021,
                61226,
                25113,
                62608,
                22033,
                38535,
                35744,
                2217,
                56773,
                41426,
                51294,
                23145,
                63125,
                43335,
                40049,
                8417,
                14476,
                1925,
                55659,
                18732,
                6748,
                29899,
                40760,
                6040,
                1418,
                61196,
                3550,
                618,
                26181,
                23826,
                48042,
                12566,
                12087,
                30639,
                41980,
                63866,
                59841,
                28969,
                64590,
                63492,
                43729,
                59218,
                64730,
                42203,
                20020,
                61109,
                6497,
                51932,
                30202,
                11393,
                59391,
                57946,
                48,
                3176,
                50317,
                52881,
                8061,
                60633,
                36840,
                3081,
                14522,
                3403,
                289,
                23919,
                5425,
                57438,
                16526,
                64598,
                59884,
                32857,
                11101,
                58526,
                64380,
                27086,
                23580,
                49285,
                65017,
                2380,
                7059,
                35690,
                38909,
                10982,
                7009,
                14838,
                64421,
                44042,
                21647,
                12963,
                50130,
                7284,
                1631,
                39460,
                18765,
                39293,
                35944,
                41591,
                25001,
                39010,
                2054,
                8054,
                8597,
                7442,
                14070,
                41496,
                37294,
                24709,
                51915,
                16239,
                15282,
                41514,
                36319,
                194,
                61902,
                2765,
                4527,
                12621,
                15157,
                32613,
                42764,
                42941,
                2742,
                8037,
                24764,
                2997,
                37317,
                31383,
                41988,
                51745,
                50649,
                5672,
                37885,
                57607,
                57323,
                34430,
                23325,
                37369,
                48868,
                52998,
                49335,
                2118,
                34024,
                44055,
                26986,
                51243,
                56175,
                55196,
                33123,
                33203,
                39166,
                39668,
                47747,
                59172,
                41219,
                64724,
                31920,
                53781,
                3397,
                41093,
                12002,
                856,
                29718,
                10183,
                53240,
                26823,
                31665,
                13968,
                29289,
                30937,
                65294,
                314,
                62045,
                11451,
                62534,
                47101,
                54810,
                4738,
                46638,
                38402,
                42334,
                6331,
                25105,
                57626,
                19273,
                27941,
                55524,
                29552,
                11037,
                24651,
                32870,
                34059,
                51846,
                65071,
                55516,
                35519,
                19484,
                17516,
                41532,
                32467,
                51136,
                41797,
                14379,
                24710,
                6804,
                61592,
                1236,
                63943,
                25589,
                56286,
                51508,
                50287,
                35732,
                38632,
                41059,
                13003,
                5538,
                31589,
                48213,
                60082,
                1332,
                5720,
                27728,
                32817,
                60323,
                8325,
                3124,
                55596,
                15237,
                5878,
                46171,
                44201,
                34287,
                50477,
                42676,
                13553,
                31416,
                24083,
                3165,
                39662,
                19341,
                24490,
                46621,
                62596,
                1941,
                55039,
                23671,
                17177,
                58430,
                52439,
                29988,
                1498,
                16813,
                11053,
                63975,
                48272,
                58504,
                2324,
                2703,
                56731,
                17842,
                46265,
                45618,
                12494,
                36895,
                22390,
                5922,
                33973,
                13801,
                14283,
                30244,
                6601,
                21313,
                38870,
                1538,
                55017,
                14849,
                23377,
                28513,
                58159,
                28992,
                14527,
                31310,
                57028,
                53190,
                38342,
                50137,
                1851,
                12733,
                17544,
                14870,
                39261,
                40355,
                41068,
                61279,
                43701,
                42157,
                51666,
                38122,
                32907,
                46195,
                32647,
                32384,
                61681,
                43646,
                58983,
                16311,
                49162,
                62126,
                16550,
                34835,
                11173,
                43234,
                57477,
                9439,
                714,
                26518,
                42813,
                3921,
                10127,
                7150,
                26587,
                46212,
                44390,
                44509,
                44102,
                50253,
                58261,
                26603,
                45636,
                25587,
                32484,
                4590,
                28411,
                51458,
                57353,
                11808,
                25958,
                50722,
                7863,
                37457,
                13515,
                26963,
                20825,
                31743,
                61132,
                33497,
                27307,
                75,
                60587,
                16710,
                40504
            ]);

            console.info('SensorsData \n');
        }

        class Communication_test extends _Host_root.Communication {
            onDeviceVersion(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onDeviceVersion(cur.as_pack(_Host.DeviceVersion.impl_));
            }
            onBusConfiguration(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onBusConfiguration(cur.as_pack(_Host.BusConfiguration.impl_));
            }
            onInstructionsPack(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onInstructionsPack(cur.as_pack(_Host.InstructionsPack.impl_));
            }
            onDeviceError(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onDeviceError(cur.as_pack(_Host.DeviceError.impl_));
            }
            onSensorsData(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onSensorsData(cur.as_pack(_Host.SensorsData.impl_));
            }
            sendingPack: _Pack | null = null;
            pullSendingPack(): _Pack | null {
                let pack = this.sendingPack;
                this.sendingPack = null;
                return pack;
            }
            pushSendingPack(pack: _Pack): boolean {
                if (this.sendingPack) return false;
                this.sendingPack = pack;
                return true;
            }
        }

        export function Main() {
            let cur = _Config.Cursor();
            let cur_dst = _Config.Cursor();
            let Communication_instance = new Communication_test();

            console.info('-------------------- DeviceVersion -------------------------');

            fill_DeviceVersion(TestChannel.NEW.DeviceVersion(cur));
            let p0 = cur.as_pack(_Host.DeviceVersion.impl_);
            onDeviceVersion(p0);
            {
                cur_dst.wrap(_Host.DeviceVersion.meta_);
                let dst = cur_dst.as_pack(_Test.DeviceVersion.impl_);
                _Host.DeviceVersion.push_(p0, new DeviceVersion.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);
            }

            if (TestChannel.send(p0)) _Lib.Channel.bytes_transfer(TestChannel.transmitterStd, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- Stop -------------------------');

            if (Communication_instance.sendStop()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- Start -------------------------');

            if (Communication_instance.sendStart()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- GetDeviceVersion -------------------------');

            if (Communication_instance.sendGetDeviceVersion()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- GetConfiguration -------------------------');

            if (Communication_instance.sendGetConfiguration()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- SetConfiguration -------------------------');

            if (Communication_instance.sendSetConfiguration()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- BusConfiguration -------------------------');

            let p6 = _Host_root.Communication.NEW.BusConfiguration(cur);
            fill_BusConfiguration(p6);
            onBusConfiguration(p6);
            {
                let dst = _Host_root.Communication.NEW.BusConfiguration(cur_dst);
                _Host.BusConfiguration.push_(p6, new BusConfiguration.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);

                dst = _Host_root.Communication.NEW.BusConfiguration(cur_dst);
                _Host.BusConfiguration.pull_(new BusConfiguration.Src_adapter(p6), dst);
                const problem2 = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem2) throw new Error('not equals at ' + problem2);
            }

            if (Communication_instance.send(p6)) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- InstructionsPack -------------------------');

            let p7 = _Host_root.Communication.NEW.InstructionsPack(cur);
            fill_InstructionsPack(p7);
            onInstructionsPack(p7);
            {
                let dst = _Host_root.Communication.NEW.InstructionsPack(cur_dst);
                _Host.InstructionsPack.push_(p7, new InstructionsPack.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);

                dst = _Host_root.Communication.NEW.InstructionsPack(cur_dst);
                _Host.InstructionsPack.pull_(new InstructionsPack.Src_adapter(p7), dst);
                const problem2 = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem2) throw new Error('not equals at ' + problem2);
            }

            if (Communication_instance.send(p7)) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- DeviceError -------------------------');

            fill_DeviceError(TestChannel.NEW.DeviceError(cur));
            let p8 = cur.as_pack(_Host.DeviceError.impl_);
            onDeviceError(p8);
            {
                cur_dst.wrap(_Host.DeviceError.meta_);
                let dst = cur_dst.as_pack(_Test.DeviceError.impl_);
                _Host.DeviceError.push_(p8, new DeviceError.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);
            }

            if (TestChannel.send(p8)) _Lib.Channel.bytes_transfer(TestChannel.transmitterStd, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- SensorsData -------------------------');

            fill_SensorsData(TestChannel.NEW.SensorsData(cur));
            let p9 = cur.as_pack(_Host.SensorsData.impl_);
            onSensorsData(p9);
            {
                cur_dst.wrap(_Host.SensorsData.meta_);
                let dst = cur_dst.as_pack(_Test.SensorsData.impl_);
                _Host.SensorsData.push_(p9, new SensorsData.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);
            }

            if (TestChannel.send(p9)) _Lib.Channel.bytes_transfer(TestChannel.transmitterStd, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');
        }
    }
}
org.unirail.Test_.Main();
