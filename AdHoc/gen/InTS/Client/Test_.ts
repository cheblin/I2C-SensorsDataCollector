//const assert = require('assert').strict; //https://nodejs.org/api/assert.html

import { org as _org } from './AdHoc';
import _Lib = _org.unirail.AdHoc;
import _Pack = _Lib.Pack;
import _Cursor = _Pack.Cursor;

import { org as _ad_hoc } from './Client';
import _Config = _ad_hoc.unirail.AdHoc.Config_;

import { org as _gen } from './Client';
import _Host_root = _gen.company;
import _Host = _gen.company.Client;

export namespace org.unirail {
    export namespace Test_ {
        import _Test = org.unirail.Test_;

        function assertFloatEqual(a: any, b: any) {
            if (a === b) return;

            if (a instanceof Array && b instanceof Array) {
                if (a.length !== b.length) throw new Error(`a.length=${a.length} !== b.length=${b.length}`);
                for (let i = 0, max = a.length; i < max; i++) if (Math.fround(a[i]) !== Math.fround(b[i])) throw new Error(`a[${i}]=${a} !== b[${i}]=${b}`);
                return;
            }
            let A = a[Symbol.iterator]?.();
            let B = b[Symbol.iterator]?.();
            if (A && B)
                for (let i = 0; ; i++) {
                    const A_next = A.next();
                    const B_next = B.next();
                    if (A_next.done === B_next.done)
                        if (A_next.done) return;
                        else if (Math.fround(A_next.value) === Math.fround(B_next.value)) continue;

                    throw new Error(`At index = ` + i + '\nA.done = ' + A_next.done + '\tA.value = ' + A_next.value + '\nB.done = ' + B_next.done + '\tB.value = ' + B_next.value);
                }

            if (Math.fround(a) !== Math.fround(b)) throw new Error(`a=${a} !== b=${b}`);
        }

        function assertEqual(a: any, b: any) {
            if (a === b) return;

            if (a instanceof Array && b instanceof Array) {
                if (a.length !== b.length) throw new Error(`a.length=${a.length} !== b.length=${b.length}`);
                for (let i = 0, max = a.length; i < max; i++) if (a[i] !== b[i]) throw new Error(`a[${i}]=${a} !== b[${i}]=${b}`);
                return;
            }

            let A = a[Symbol.iterator]?.();
            let B = b[Symbol.iterator]?.();
            if (A && B)
                for (let i = 0; ; i++) {
                    const A_next = A.next();
                    const B_next = B.next();
                    if (A_next.done === B_next.done)
                        if (A_next.done) return;
                        else if (A_next.value === B_next.value) continue;

                    throw new Error(`At index = ` + i + '\nA.done = ' + A_next.done + '\tA.value = ' + A_next.value + '\nB.done = ' + B_next.done + '\tB.value = ' + B_next.value);
                }

            throw new Error(`a=${a} !== b=${b}`);
        }

        export interface DeviceVersion {
            DevID(): number;
            DevID_(src: number);
            Ver(): number;
            Ver_(src: number);
        }

        export namespace DeviceVersion {
            class Impl_ extends _Cursor.View implements DeviceVersion {
                public DevID(): number {
                    return this.data_.bytes.getUint16(this.data_.origin + 0, true);
                }
                public DevID_(src: number) {
                    this.data_.bytes.setUint16(this.data_.origin + 0, src, true);
                }

                public Ver(): number {
                    return this.data_.bytes.getUint16(this.data_.origin + 2, true);
                }
                public Ver_(src: number) {
                    this.data_.bytes.setUint16(this.data_.origin + 2, src, true);
                }
            }

            export const impl_ = Impl_.prototype;

            export class Dst_adapter implements _Host.DeviceVersion.DST_ {
                constructor(public dst: DeviceVersion) {}
                public DevID_(src: number) {
                    this.dst.DevID_(src);
                }
                public Ver_(src: number) {
                    this.dst.Ver_(src);
                }
            }
        }
        export namespace BusConfiguration {
            export class Dst_adapter implements _Host.BusConfiguration.DST_ {
                constructor(public dst: _Host.BusConfiguration) {}
                public multiplier_(src: number) {
                    this.dst.multiplier_(src);
                }
                public time_(src: number) {
                    this.dst.time_(src);
                }
                public clk_khz_(src: number) {
                    this.dst.clk_khz_(src);
                }
            }

            export class Src_adapter implements _Host.BusConfiguration.SRC_ {
                constructor(public src: _Host.BusConfiguration) {}
                public multiplier(): number {
                    return this.src.multiplier();
                }
                public time(): number {
                    return this.src.time();
                }
                public clk_khz(): number {
                    return this.src.clk_khz();
                }
            }
        }
        export namespace InstructionsPack {
            export class Dst_adapter implements _Host.InstructionsPack.DST_ {
                constructor(public dst: _Host.InstructionsPack) {}
                public Length_(src: number) {
                    this.dst.Length_(src);
                }
                public Instructions_(src: _Host.InstructionsPack.Instructions) {
                    const item = this.dst.Instructions();
                    for (let i = 0; i < _Host.InstructionsPack.Instructions.item_len; i++) item.set(src.get(i), i);
                }
            }

            export class Src_adapter implements _Host.InstructionsPack.SRC_ {
                constructor(public src: _Host.InstructionsPack) {}
                public Length(): number {
                    return this.src.Length();
                }
                public Instructions(dst: _Host.InstructionsPack.Instructions) {
                    const item = this.src.Instructions();
                    for (let i = 0; i < _Host.InstructionsPack.Instructions.item_len; i++) dst.set(item.get(i), i);
                }
            }
        }
        export interface DeviceError {
            param1(): number;
            param1_(src: number);
            error_id(): _Host.Errors;
            error_id_(src: _Host.Errors);
        }

        export namespace DeviceError {
            class Impl_ extends _Cursor.View implements DeviceError {
                public param1(): number {
                    return this.data_.bytes.getUint16(this.data_.origin + 0, true);
                }
                public param1_(src: number) {
                    this.data_.bytes.setUint16(this.data_.origin + 0, src, true);
                }

                public error_id(): _Host.Errors {
                    return _Lib.get_bits(this.data_.bytes, this.data_.origin * 8 + 16, 1);
                }
                public error_id_(src: _Host.Errors) {
                    _Lib.set_bits(src, 1, this.data_.bytes, this.data_.origin * 8 + 16);
                }
            }

            export const impl_ = Impl_.prototype;

            export class Dst_adapter implements _Host.DeviceError.DST_ {
                constructor(public dst: DeviceError) {}
                public error_id_(src: _Host.Errors) {
                    this.dst.error_id_(src);
                }
                public param1_(src: number) {
                    this.dst.param1_(src);
                }
            }
        }
        export interface SensorsData {
            values(): SensorsData.values;
            values_(src: SensorsData.values | number[]);
            values$(src: Iterator<number>, len: number);
        }

        export namespace SensorsData {
            export interface values extends Iterable<number> {
                get(index: number);
                equals(other: this): boolean;
                equals(other: Iterator<number>): boolean;
                set(src: number, index: number);
            }
            export namespace values {
                export class Field extends _Cursor.View implements values, Iterable<number> {
                    public get(index: number): number {
                        return this.data_.bytes.getUint16(this.data_.origin + 0 + index * 2, true);
                    }

                    equals(other: Iterator<number>): boolean;
                    public equals(other: this): boolean;

                    equals(other): boolean {
                        if (other instanceof Field) return _Lib.ArrayEquals(this.data_.bytes.buffer, this.data_.origin + 0, other.data_.bytes.buffer, other.data_.origin + 0, _Host.SensorsData.values.item_len) === 0;
                        for (let i = 0; i < _Host.SensorsData.values.item_len; i++) {
                            let v = other.next();
                            if (v.done || v.value !== this.get(i)) return false;
                        }
                        return true;
                    }
                    [Symbol.iterator](): Iterator<number> {
                        const outer = this;
                        let index = 0;
                        const max = _Host.SensorsData.values.item_len;
                        return new (class implements Iterator<number> {
                            value: number;
                            done: boolean;

                            next(value?: any): IteratorResult<number> {
                                if ((this.done = index === max)) index = 0;
                                else this.value = outer.get(index++);
                                return this;
                            }
                        })();
                    }

                    public set(src: number, index: number) {
                        this.data_.bytes.setUint16(this.data_.origin + 0 + index * 2, src, true);
                    }
                }
                export const field = Field.prototype;

                export const item_len = 1000;
            }

            class Impl_ extends _Cursor.View implements SensorsData {
                public values(): SensorsData.values {
                    return this.data_.as_field(SensorsData.values.field);
                }
                public values_(src: SensorsData.values | number[]): values {
                    if (src instanceof Array) {
                        let len = Math.min(_Host.SensorsData.values.item_len, src.length);
                        for (let index = 0; index < len; index++) this.data_.bytes.setUint16(this.data_.origin + 0 + index * 2, src[index], true);
                        return this.data_.as_field(values.field);
                    }
                    for (let index = 0; index < _Host.SensorsData.values.item_len; index++) this.data_.bytes.setUint16(this.data_.origin + 0 + index * 2, src.get(index), true);

                    return this.data_.as_field(values.field);
                }

                public values$(src: Iterator<number>, len: number): values {
                    let len_ = Math.min(len, _Host.SensorsData.values.item_len);

                    len = Math.min(len, _Host.SensorsData.values.item_len);
                    if (src)
                        for (let index = 0; index < len; index++) {
                            let v = src.next();
                            if (v.done) break;
                            this.data_.bytes.setUint16(this.data_.origin + 0 + index * 2, v.value, true);
                        }
                    return this.data_.as_field(values.field);
                }
            }

            export const impl_ = Impl_.prototype;

            export class Dst_adapter implements _Host.SensorsData.DST_ {
                constructor(public dst: SensorsData) {}
                public values_(src: _Host.SensorsData.values) {
                    const item = this.dst.values();
                    for (let i = 0; i < _Host.SensorsData.values.item_len; i++) item.set(src.get(i), i);
                }
            }
        }

        namespace TestChannel {
            function dispatch(id: number, pack: _Pack): _Pack.Meta | null {
                switch (id) {
                    case 1:
                        if (!pack) return _Host.Stop.pack_.meta;
                        onStop();
                        return null;
                    case 2:
                        if (!pack) return _Host.Start.pack_.meta;
                        onStart();
                        return null;
                    case 3:
                        if (!pack) return _Host.GetDeviceVersion.pack_.meta;
                        onGetDeviceVersion();
                        return null;
                    case 4:
                        if (!pack) return _Host.GetConfiguration.pack_.meta;
                        onGetConfiguration();
                        return null;
                    case 5:
                        if (!pack) return _Host.SetConfiguration.pack_.meta;
                        onSetConfiguration();
                        return null;
                }
                return null;
            }
            class Receiver extends _Lib.Channel.Receiver {
                constructor() {
                    super(1, 1);
                }
                dispatch(id: number, pack: _Pack): _Pack.Meta | null {
                    return dispatch(id, pack);
                }
            }

            class ReceiverAdv extends _Lib.Channel.Receiver.Advanced {
                constructor() {
                    super(1, 1);
                }
                dispatch(id: number, pack: _Pack): _Pack.Meta | null {
                    return dispatch(id, pack);
                }
            }
            export const receiverStd = new Receiver();
            export const receiverAdv = new ReceiverAdv();

            let sendingPack: _Pack | null = null;

            class Transmitter extends _Lib.Channel.Transmitter {
                constructor() {
                    super(1, 1);
                }
                pullSendingPack(): _Pack | null {
                    let ret = sendingPack;
                    sendingPack = null;
                    return ret;
                }
            }
            class TransmitterAdv extends _Lib.Channel.Transmitter.Advanced {
                constructor() {
                    super(1, 1);
                }
                pullSendingPack(): _Pack | null {
                    let ret = sendingPack;
                    sendingPack = null;
                    return ret;
                }
            }
            export const transmitterStd = new Transmitter();
            export const transmitterAdv = new TransmitterAdv();

            export function send(src: _Host.DeviceVersion): boolean;

            export function send(src: _Host.DeviceError): boolean;

            export function send(src: _Host.SensorsData): boolean;

            export function send(src): boolean {
                if (sendingPack) return false;
                sendingPack = src.data_.unwrap();
                return true;
            }

            export namespace NEW {
                export function DeviceVersion(cur: _Cursor): _Test.DeviceVersion {
                    cur.wrap(_Host.DeviceVersion.meta_);
                    return cur.as_pack(_Test.DeviceVersion.impl_);
                }
                export function DeviceError(cur: _Cursor): _Test.DeviceError {
                    cur.wrap(_Host.DeviceError.meta_);
                    return cur.as_pack(_Test.DeviceError.impl_);
                }
                export function SensorsData(cur: _Cursor): _Test.SensorsData {
                    cur.wrap(_Host.SensorsData.meta_);
                    return cur.as_pack(_Test.SensorsData.impl_);
                }
            }
        }

        export function fill_DeviceVersion(p0: _Test.DeviceVersion) {
            p0.DevID_(58866);
            p0.Ver_(59023);
        }

        export function onDeviceVersion(p0: _Host.DeviceVersion) {
            assertEqual(p0.DevID(), 58866);
            assertEqual(p0.Ver(), 59023);
            console.info('DeviceVersion \n');
        }
        export function onStop() {
            console.info('Stop \n');
        }
        export function onStart() {
            console.info('Start \n');
        }
        export function onGetDeviceVersion() {
            console.info('GetDeviceVersion \n');
        }
        export function onGetConfiguration() {
            console.info('GetConfiguration \n');
        }
        export function onSetConfiguration() {
            console.info('SetConfiguration \n');
        }

        export function fill_BusConfiguration(p6: _Host.BusConfiguration) {
            p6.multiplier_(205);
            p6.time_(21926);
            p6.clk_khz_(34396);
        }

        export function onBusConfiguration(p6: _Host.BusConfiguration) {
            assertEqual(p6.multiplier(), 205);
            assertEqual(p6.time(), 21926);
            assertEqual(p6.clk_khz(), 34396);
            console.info('BusConfiguration \n');
        }

        export function fill_InstructionsPack(p7: _Host.InstructionsPack) {
            p7.Length_(250);
            p7.Instructions_([
                250,
                222,
                66,
                103,
                246,
                61,
                223,
                49,
                237,
                82,
                178,
                235,
                155,
                109,
                132,
                133,
                143,
                108,
                242,
                10,
                70,
                66,
                16,
                11,
                92,
                130,
                68,
                112,
                58,
                181,
                183,
                192,
                192,
                47,
                155,
                190,
                19,
                77,
                14,
                78,
                232,
                15,
                82,
                4,
                47,
                223,
                254,
                2,
                80,
                117,
                160,
                206,
                199,
                20,
                212,
                183,
                138,
                103,
                187,
                114,
                171,
                196,
                223,
                113,
                252,
                173,
                124,
                45,
                21,
                11,
                162,
                26,
                102,
                65,
                188,
                75,
                184,
                58,
                106,
                255,
                191,
                98,
                203,
                45,
                254,
                115,
                94,
                179,
                219,
                75,
                96,
                181,
                103,
                91,
                230,
                239,
                193,
                184,
                126,
                101,
                66,
                58,
                1,
                196,
                55,
                244,
                200,
                7,
                241,
                71,
                137,
                56,
                65,
                164,
                136,
                250,
                96,
                70,
                229,
                218,
                49,
                70,
                93,
                44,
                128,
                48,
                205,
                139,
                250,
                211,
                128,
                150,
                223,
                124,
                23,
                107,
                196,
                106,
                12,
                112,
                61,
                83,
                201,
                226,
                11,
                28,
                24,
                125,
                93,
                124,
                255,
                169,
                251,
                240,
                196,
                156,
                93,
                157,
                121,
                64,
                92,
                44,
                201,
                254,
                224,
                76,
                79,
                54,
                182,
                207,
                141,
                197,
                228,
                132,
                219,
                150,
                10,
                148,
                253,
                197,
                26,
                79,
                195,
                84,
                12,
                149,
                102,
                205,
                108,
                223,
                208,
                250,
                120,
                214,
                86,
                26,
                145,
                41,
                86,
                231,
                251,
                169,
                155,
                177,
                168,
                15,
                165,
                19,
                29,
                164,
                160,
                250,
                220,
                147,
                56,
                196,
                186,
                87,
                113,
                56,
                79,
                54,
                129,
                56,
                75,
                244,
                35,
                138,
                220,
                54,
                112,
                174,
                226,
                78,
                56,
                146,
                43,
                70,
                148,
                157,
                70,
                143,
                28,
                244,
                174,
                178,
                4,
                46,
                177,
                193,
                235,
                186,
                231,
                158,
                31,
                241
            ]);
        }

        export function onInstructionsPack(p7: _Host.InstructionsPack) {
            assertEqual(p7.Length(), 250);
            assertEqual(p7.Instructions(), [
                250,
                222,
                66,
                103,
                246,
                61,
                223,
                49,
                237,
                82,
                178,
                235,
                155,
                109,
                132,
                133,
                143,
                108,
                242,
                10,
                70,
                66,
                16,
                11,
                92,
                130,
                68,
                112,
                58,
                181,
                183,
                192,
                192,
                47,
                155,
                190,
                19,
                77,
                14,
                78,
                232,
                15,
                82,
                4,
                47,
                223,
                254,
                2,
                80,
                117,
                160,
                206,
                199,
                20,
                212,
                183,
                138,
                103,
                187,
                114,
                171,
                196,
                223,
                113,
                252,
                173,
                124,
                45,
                21,
                11,
                162,
                26,
                102,
                65,
                188,
                75,
                184,
                58,
                106,
                255,
                191,
                98,
                203,
                45,
                254,
                115,
                94,
                179,
                219,
                75,
                96,
                181,
                103,
                91,
                230,
                239,
                193,
                184,
                126,
                101,
                66,
                58,
                1,
                196,
                55,
                244,
                200,
                7,
                241,
                71,
                137,
                56,
                65,
                164,
                136,
                250,
                96,
                70,
                229,
                218,
                49,
                70,
                93,
                44,
                128,
                48,
                205,
                139,
                250,
                211,
                128,
                150,
                223,
                124,
                23,
                107,
                196,
                106,
                12,
                112,
                61,
                83,
                201,
                226,
                11,
                28,
                24,
                125,
                93,
                124,
                255,
                169,
                251,
                240,
                196,
                156,
                93,
                157,
                121,
                64,
                92,
                44,
                201,
                254,
                224,
                76,
                79,
                54,
                182,
                207,
                141,
                197,
                228,
                132,
                219,
                150,
                10,
                148,
                253,
                197,
                26,
                79,
                195,
                84,
                12,
                149,
                102,
                205,
                108,
                223,
                208,
                250,
                120,
                214,
                86,
                26,
                145,
                41,
                86,
                231,
                251,
                169,
                155,
                177,
                168,
                15,
                165,
                19,
                29,
                164,
                160,
                250,
                220,
                147,
                56,
                196,
                186,
                87,
                113,
                56,
                79,
                54,
                129,
                56,
                75,
                244,
                35,
                138,
                220,
                54,
                112,
                174,
                226,
                78,
                56,
                146,
                43,
                70,
                148,
                157,
                70,
                143,
                28,
                244,
                174,
                178,
                4,
                46,
                177,
                193,
                235,
                186,
                231,
                158,
                31,
                241
            ]);

            console.info('InstructionsPack \n');
        }

        export function fill_DeviceError(p8: _Test.DeviceError) {
            p8.param1_(37570);
            p8.error_id_(_Host.Errors.SensorsDataOverflow);
        }

        export function onDeviceError(p8: _Host.DeviceError) {
            assertEqual(p8.param1(), 37570);
            assertEqual(p8.error_id(), _Host.Errors.SensorsDataOverflow);
            console.info('DeviceError \n');
        }

        export function fill_SensorsData(p9: _Test.SensorsData) {
            p9.values_([
                18099,
                47404,
                58465,
                14708,
                52099,
                32436,
                7168,
                52768,
                34648,
                18840,
                10366,
                20114,
                60085,
                61014,
                59261,
                39346,
                38199,
                45893,
                5876,
                26675,
                23626,
                47252,
                12321,
                12806,
                12401,
                4598,
                26597,
                7392,
                65374,
                63530,
                6831,
                18829,
                21795,
                63875,
                61437,
                36695,
                46547,
                21455,
                8543,
                52419,
                54171,
                48406,
                14634,
                11247,
                29713,
                62386,
                3124,
                37550,
                25357,
                58162,
                58383,
                65253,
                43960,
                55983,
                14780,
                4317,
                41175,
                11262,
                44831,
                39401,
                10339,
                61252,
                44877,
                53217,
                25729,
                24248,
                24801,
                26129,
                51521,
                61879,
                47718,
                4599,
                5762,
                63270,
                16796,
                31807,
                49916,
                51921,
                58483,
                13767,
                41975,
                62605,
                24118,
                16810,
                40378,
                51853,
                29183,
                65186,
                3328,
                27613,
                8298,
                37641,
                14116,
                22902,
                54661,
                11171,
                40169,
                60719,
                40716,
                58215,
                41974,
                17864,
                3987,
                49133,
                58363,
                41594,
                41041,
                15041,
                61563,
                7804,
                57187,
                43854,
                59491,
                30090,
                24493,
                45273,
                6627,
                41014,
                58746,
                55443,
                6448,
                26574,
                64236,
                14154,
                56156,
                13082,
                15072,
                37747,
                17582,
                8689,
                58719,
                28661,
                64135,
                20400,
                46575,
                14846,
                35087,
                7150,
                22112,
                31708,
                55399,
                25038,
                51441,
                25971,
                63130,
                31616,
                59699,
                47589,
                6939,
                54025,
                29292,
                57242,
                23327,
                61810,
                17396,
                58780,
                25326,
                9634,
                33098,
                45973,
                51710,
                9686,
                18674,
                37147,
                50000,
                55659,
                22391,
                14450,
                49611,
                59640,
                49251,
                55182,
                30405,
                60141,
                19648,
                17423,
                63182,
                52989,
                2082,
                23756,
                56922,
                40158,
                49297,
                41529,
                35744,
                46844,
                37720,
                52268,
                58224,
                17624,
                16449,
                10514,
                28183,
                9227,
                8975,
                28359,
                62802,
                9582,
                42685,
                1092,
                8532,
                57925,
                28072,
                45246,
                10529,
                32705,
                25099,
                47194,
                40841,
                9363,
                36925,
                22890,
                56694,
                48342,
                25909,
                41007,
                27082,
                14816,
                9306,
                52164,
                23607,
                58152,
                23543,
                29373,
                45635,
                19069,
                45346,
                21241,
                34882,
                477,
                18406,
                22650,
                42206,
                64079,
                34674,
                30608,
                3824,
                44936,
                55455,
                22280,
                22646,
                63941,
                18539,
                2735,
                20223,
                53456,
                45592,
                61362,
                214,
                7268,
                29561,
                50283,
                63135,
                36833,
                5095,
                25146,
                55751,
                26256,
                16218,
                41384,
                23694,
                42824,
                31222,
                20980,
                3859,
                14225,
                95,
                24631,
                54651,
                5345,
                15171,
                54415,
                10141,
                34778,
                6297,
                5771,
                55096,
                26097,
                10889,
                44740,
                55959,
                48042,
                52812,
                17605,
                26086,
                48103,
                38889,
                15804,
                10851,
                33931,
                41602,
                16832,
                60729,
                7535,
                26843,
                37125,
                62175,
                28188,
                60518,
                5427,
                21160,
                32755,
                28632,
                27976,
                16599,
                39711,
                45794,
                36002,
                26486,
                21921,
                64411,
                16508,
                29077,
                58376,
                43284,
                1598,
                38998,
                26746,
                42299,
                65023,
                33766,
                19624,
                4080,
                20399,
                8881,
                29400,
                17326,
                30727,
                63235,
                48364,
                18292,
                36975,
                53475,
                15291,
                28148,
                11935,
                38735,
                36443,
                42578,
                28607,
                35938,
                30704,
                54061,
                11178,
                59763,
                44402,
                18152,
                37659,
                54790,
                31001,
                5716,
                62393,
                45053,
                48284,
                3371,
                14245,
                24462,
                961,
                7095,
                37266,
                14260,
                10922,
                53664,
                29303,
                710,
                42603,
                51613,
                32054,
                11596,
                5707,
                12502,
                22709,
                50162,
                53033,
                33948,
                12231,
                8096,
                2189,
                147,
                32790,
                52228,
                25773,
                5640,
                29688,
                16550,
                34268,
                60233,
                57656,
                38515,
                16155,
                40772,
                14721,
                33689,
                40156,
                49776,
                45650,
                16165,
                20430,
                58,
                7484,
                30330,
                28412,
                11483,
                9235,
                39649,
                39237,
                11559,
                61730,
                8445,
                10181,
                13084,
                54073,
                6394,
                64981,
                59094,
                43098,
                18842,
                30910,
                30269,
                15930,
                26145,
                48612,
                14635,
                39476,
                44033,
                3165,
                57925,
                47400,
                3196,
                28425,
                54071,
                63004,
                52910,
                20321,
                16135,
                9975,
                20508,
                65527,
                39537,
                2828,
                50654,
                40802,
                30107,
                8305,
                38206,
                58324,
                42246,
                59787,
                7781,
                31474,
                36462,
                34774,
                27471,
                57550,
                51390,
                45570,
                57185,
                60562,
                30513,
                47668,
                17628,
                35145,
                3061,
                31897,
                55676,
                980,
                59255,
                15194,
                56974,
                61910,
                33749,
                53648,
                53490,
                3573,
                19010,
                41423,
                21220,
                28062,
                63339,
                54812,
                57347,
                60938,
                18331,
                14559,
                16466,
                28856,
                3431,
                5515,
                32040,
                6892,
                17421,
                13005,
                32123,
                64723,
                51981,
                39474,
                24327,
                13078,
                53178,
                62980,
                60350,
                36044,
                40135,
                62434,
                37290,
                21646,
                15132,
                32466,
                4035,
                48439,
                40467,
                6835,
                26122,
                53712,
                18680,
                36769,
                43096,
                37831,
                42214,
                34399,
                52294,
                7865,
                16667,
                33181,
                28342,
                48891,
                28559,
                27554,
                45026,
                12055,
                26030,
                21738,
                34642,
                32031,
                18348,
                22471,
                11348,
                53123,
                39018,
                17383,
                51118,
                22742,
                58309,
                4636,
                55591,
                13772,
                2045,
                33092,
                33656,
                34312,
                42045,
                24828,
                33270,
                34882,
                29247,
                46919,
                17082,
                65109,
                16085,
                43264,
                52998,
                55307,
                3028,
                40311,
                63788,
                29415,
                15287,
                34522,
                18381,
                63276,
                25276,
                14602,
                45331,
                44391,
                32319,
                11150,
                33374,
                32261,
                12797,
                26896,
                38765,
                19297,
                53022,
                18758,
                12023,
                47186,
                58338,
                29527,
                55555,
                53026,
                60324,
                27445,
                11613,
                29677,
                10238,
                30471,
                3875,
                36403,
                21175,
                55934,
                26197,
                32538,
                53962,
                62120,
                43268,
                22321,
                13204,
                53753,
                12664,
                56279,
                37444,
                49384,
                48055,
                20390,
                48547,
                62558,
                26608,
                65256,
                1981,
                3469,
                60263,
                48685,
                3932,
                58598,
                5898,
                56980,
                13822,
                14198,
                24726,
                27303,
                3670,
                47156,
                38948,
                39412,
                61718,
                60187,
                12227,
                62728,
                2132,
                33259,
                48040,
                3117,
                54476,
                38081,
                7953,
                28335,
                39317,
                21779,
                11839,
                57561,
                62780,
                51024,
                10620,
                13606,
                7709,
                45692,
                45109,
                25132,
                14189,
                5227,
                59041,
                62412,
                5215,
                24388,
                32603,
                14020,
                10452,
                13611,
                4366,
                48087,
                54305,
                47233,
                42828,
                30882,
                16099,
                61437,
                56288,
                52898,
                30673,
                39520,
                35251,
                44026,
                21982,
                54788,
                1857,
                6292,
                56854,
                41865,
                45224,
                24443,
                44065,
                52550,
                1166,
                18632,
                63738,
                41739,
                47805,
                52569,
                54762,
                31768,
                20955,
                14561,
                5643,
                24254,
                60808,
                30526,
                9296,
                48167,
                5663,
                32745,
                43380,
                5129,
                11304,
                16711,
                49250,
                13946,
                31980,
                622,
                64696,
                61418,
                40641,
                54739,
                41441,
                23025,
                60605,
                56706,
                49552,
                2919,
                19285,
                7635,
                3257,
                2125,
                19928,
                27483,
                58547,
                12570,
                40427,
                55865,
                46185,
                21874,
                56408,
                44374,
                27767,
                47882,
                30957,
                55424,
                10518,
                27106,
                38213,
                13338,
                34624,
                16427,
                16811,
                16570,
                586,
                24871,
                61306,
                56926,
                7892,
                8970,
                31233,
                37060,
                7914,
                56060,
                19600,
                1512,
                11061,
                48192,
                9509,
                50208,
                8121,
                35089,
                44202,
                33967,
                1907,
                27118,
                37784,
                56645,
                45380,
                52833,
                47590,
                968,
                56260,
                38736,
                57026,
                19820,
                20042,
                63181,
                29522,
                64134,
                11345,
                8125,
                13262,
                61139,
                15045,
                56307,
                23892,
                60107,
                10350,
                53683,
                53926,
                20847,
                22240,
                37705,
                3297,
                60321,
                61283,
                45392,
                32130,
                33253,
                14262,
                18328,
                14329,
                5893,
                45418,
                54800,
                50814,
                15523,
                34428,
                33497,
                30477,
                16914,
                13172,
                13739,
                16272,
                21506,
                56242,
                25049,
                6938,
                29186,
                61709,
                36923,
                8538,
                58259,
                55040,
                286,
                40229,
                32552,
                14443,
                60565,
                2129,
                1642,
                4806,
                32798,
                63395,
                20549,
                330,
                2342,
                45891,
                40484,
                17897,
                18189,
                37146,
                32048,
                28527,
                27921,
                54995,
                25032,
                9745,
                36632,
                17751,
                18994,
                3119,
                33613,
                3241,
                11029,
                58069,
                11110,
                62028,
                27267,
                1496,
                30422,
                28349,
                12924,
                18386,
                28963,
                25640,
                5514,
                3759,
                22224,
                32348,
                6526,
                37907,
                12552,
                3544,
                33644,
                26349,
                797,
                6431,
                54465,
                55566,
                20547,
                27617,
                35043,
                21949,
                19365,
                22615,
                11633,
                61702,
                39334,
                19776,
                21609,
                26462,
                36,
                57061,
                24741,
                59133,
                57787,
                22361,
                65373,
                29117,
                45888,
                33964,
                19396,
                10863,
                58957,
                35932,
                41059,
                676,
                15553,
                17167,
                5268,
                10313,
                15367,
                47120,
                51748,
                48416,
                2697,
                19642,
                35312,
                34757,
                58269,
                30950,
                55835,
                59478,
                54182,
                15321,
                56650,
                39488,
                47899,
                28053,
                43159,
                59577,
                58885,
                41096,
                16073,
                29592,
                55016,
                17848,
                46208,
                20350,
                9404,
                65247,
                57865,
                58872,
                22245,
                56318,
                44067,
                51320,
                1184,
                6678,
                34691,
                59605,
                40819,
                47199,
                28441,
                61633,
                52982,
                42338,
                55056,
                10588,
                24118,
                32370,
                228,
                42896,
                10142,
                51838,
                20786,
                41781,
                56454,
                17135,
                32276,
                17224,
                37223,
                55054,
                58450,
                17203,
                27665,
                25285,
                45890,
                4757,
                22121,
                47598,
                57996,
                57978,
                39376,
                59968,
                47624,
                61976,
                24130
            ]);
        }

        export function onSensorsData(p9: _Host.SensorsData) {
            assertEqual(p9.values(), [
                18099,
                47404,
                58465,
                14708,
                52099,
                32436,
                7168,
                52768,
                34648,
                18840,
                10366,
                20114,
                60085,
                61014,
                59261,
                39346,
                38199,
                45893,
                5876,
                26675,
                23626,
                47252,
                12321,
                12806,
                12401,
                4598,
                26597,
                7392,
                65374,
                63530,
                6831,
                18829,
                21795,
                63875,
                61437,
                36695,
                46547,
                21455,
                8543,
                52419,
                54171,
                48406,
                14634,
                11247,
                29713,
                62386,
                3124,
                37550,
                25357,
                58162,
                58383,
                65253,
                43960,
                55983,
                14780,
                4317,
                41175,
                11262,
                44831,
                39401,
                10339,
                61252,
                44877,
                53217,
                25729,
                24248,
                24801,
                26129,
                51521,
                61879,
                47718,
                4599,
                5762,
                63270,
                16796,
                31807,
                49916,
                51921,
                58483,
                13767,
                41975,
                62605,
                24118,
                16810,
                40378,
                51853,
                29183,
                65186,
                3328,
                27613,
                8298,
                37641,
                14116,
                22902,
                54661,
                11171,
                40169,
                60719,
                40716,
                58215,
                41974,
                17864,
                3987,
                49133,
                58363,
                41594,
                41041,
                15041,
                61563,
                7804,
                57187,
                43854,
                59491,
                30090,
                24493,
                45273,
                6627,
                41014,
                58746,
                55443,
                6448,
                26574,
                64236,
                14154,
                56156,
                13082,
                15072,
                37747,
                17582,
                8689,
                58719,
                28661,
                64135,
                20400,
                46575,
                14846,
                35087,
                7150,
                22112,
                31708,
                55399,
                25038,
                51441,
                25971,
                63130,
                31616,
                59699,
                47589,
                6939,
                54025,
                29292,
                57242,
                23327,
                61810,
                17396,
                58780,
                25326,
                9634,
                33098,
                45973,
                51710,
                9686,
                18674,
                37147,
                50000,
                55659,
                22391,
                14450,
                49611,
                59640,
                49251,
                55182,
                30405,
                60141,
                19648,
                17423,
                63182,
                52989,
                2082,
                23756,
                56922,
                40158,
                49297,
                41529,
                35744,
                46844,
                37720,
                52268,
                58224,
                17624,
                16449,
                10514,
                28183,
                9227,
                8975,
                28359,
                62802,
                9582,
                42685,
                1092,
                8532,
                57925,
                28072,
                45246,
                10529,
                32705,
                25099,
                47194,
                40841,
                9363,
                36925,
                22890,
                56694,
                48342,
                25909,
                41007,
                27082,
                14816,
                9306,
                52164,
                23607,
                58152,
                23543,
                29373,
                45635,
                19069,
                45346,
                21241,
                34882,
                477,
                18406,
                22650,
                42206,
                64079,
                34674,
                30608,
                3824,
                44936,
                55455,
                22280,
                22646,
                63941,
                18539,
                2735,
                20223,
                53456,
                45592,
                61362,
                214,
                7268,
                29561,
                50283,
                63135,
                36833,
                5095,
                25146,
                55751,
                26256,
                16218,
                41384,
                23694,
                42824,
                31222,
                20980,
                3859,
                14225,
                95,
                24631,
                54651,
                5345,
                15171,
                54415,
                10141,
                34778,
                6297,
                5771,
                55096,
                26097,
                10889,
                44740,
                55959,
                48042,
                52812,
                17605,
                26086,
                48103,
                38889,
                15804,
                10851,
                33931,
                41602,
                16832,
                60729,
                7535,
                26843,
                37125,
                62175,
                28188,
                60518,
                5427,
                21160,
                32755,
                28632,
                27976,
                16599,
                39711,
                45794,
                36002,
                26486,
                21921,
                64411,
                16508,
                29077,
                58376,
                43284,
                1598,
                38998,
                26746,
                42299,
                65023,
                33766,
                19624,
                4080,
                20399,
                8881,
                29400,
                17326,
                30727,
                63235,
                48364,
                18292,
                36975,
                53475,
                15291,
                28148,
                11935,
                38735,
                36443,
                42578,
                28607,
                35938,
                30704,
                54061,
                11178,
                59763,
                44402,
                18152,
                37659,
                54790,
                31001,
                5716,
                62393,
                45053,
                48284,
                3371,
                14245,
                24462,
                961,
                7095,
                37266,
                14260,
                10922,
                53664,
                29303,
                710,
                42603,
                51613,
                32054,
                11596,
                5707,
                12502,
                22709,
                50162,
                53033,
                33948,
                12231,
                8096,
                2189,
                147,
                32790,
                52228,
                25773,
                5640,
                29688,
                16550,
                34268,
                60233,
                57656,
                38515,
                16155,
                40772,
                14721,
                33689,
                40156,
                49776,
                45650,
                16165,
                20430,
                58,
                7484,
                30330,
                28412,
                11483,
                9235,
                39649,
                39237,
                11559,
                61730,
                8445,
                10181,
                13084,
                54073,
                6394,
                64981,
                59094,
                43098,
                18842,
                30910,
                30269,
                15930,
                26145,
                48612,
                14635,
                39476,
                44033,
                3165,
                57925,
                47400,
                3196,
                28425,
                54071,
                63004,
                52910,
                20321,
                16135,
                9975,
                20508,
                65527,
                39537,
                2828,
                50654,
                40802,
                30107,
                8305,
                38206,
                58324,
                42246,
                59787,
                7781,
                31474,
                36462,
                34774,
                27471,
                57550,
                51390,
                45570,
                57185,
                60562,
                30513,
                47668,
                17628,
                35145,
                3061,
                31897,
                55676,
                980,
                59255,
                15194,
                56974,
                61910,
                33749,
                53648,
                53490,
                3573,
                19010,
                41423,
                21220,
                28062,
                63339,
                54812,
                57347,
                60938,
                18331,
                14559,
                16466,
                28856,
                3431,
                5515,
                32040,
                6892,
                17421,
                13005,
                32123,
                64723,
                51981,
                39474,
                24327,
                13078,
                53178,
                62980,
                60350,
                36044,
                40135,
                62434,
                37290,
                21646,
                15132,
                32466,
                4035,
                48439,
                40467,
                6835,
                26122,
                53712,
                18680,
                36769,
                43096,
                37831,
                42214,
                34399,
                52294,
                7865,
                16667,
                33181,
                28342,
                48891,
                28559,
                27554,
                45026,
                12055,
                26030,
                21738,
                34642,
                32031,
                18348,
                22471,
                11348,
                53123,
                39018,
                17383,
                51118,
                22742,
                58309,
                4636,
                55591,
                13772,
                2045,
                33092,
                33656,
                34312,
                42045,
                24828,
                33270,
                34882,
                29247,
                46919,
                17082,
                65109,
                16085,
                43264,
                52998,
                55307,
                3028,
                40311,
                63788,
                29415,
                15287,
                34522,
                18381,
                63276,
                25276,
                14602,
                45331,
                44391,
                32319,
                11150,
                33374,
                32261,
                12797,
                26896,
                38765,
                19297,
                53022,
                18758,
                12023,
                47186,
                58338,
                29527,
                55555,
                53026,
                60324,
                27445,
                11613,
                29677,
                10238,
                30471,
                3875,
                36403,
                21175,
                55934,
                26197,
                32538,
                53962,
                62120,
                43268,
                22321,
                13204,
                53753,
                12664,
                56279,
                37444,
                49384,
                48055,
                20390,
                48547,
                62558,
                26608,
                65256,
                1981,
                3469,
                60263,
                48685,
                3932,
                58598,
                5898,
                56980,
                13822,
                14198,
                24726,
                27303,
                3670,
                47156,
                38948,
                39412,
                61718,
                60187,
                12227,
                62728,
                2132,
                33259,
                48040,
                3117,
                54476,
                38081,
                7953,
                28335,
                39317,
                21779,
                11839,
                57561,
                62780,
                51024,
                10620,
                13606,
                7709,
                45692,
                45109,
                25132,
                14189,
                5227,
                59041,
                62412,
                5215,
                24388,
                32603,
                14020,
                10452,
                13611,
                4366,
                48087,
                54305,
                47233,
                42828,
                30882,
                16099,
                61437,
                56288,
                52898,
                30673,
                39520,
                35251,
                44026,
                21982,
                54788,
                1857,
                6292,
                56854,
                41865,
                45224,
                24443,
                44065,
                52550,
                1166,
                18632,
                63738,
                41739,
                47805,
                52569,
                54762,
                31768,
                20955,
                14561,
                5643,
                24254,
                60808,
                30526,
                9296,
                48167,
                5663,
                32745,
                43380,
                5129,
                11304,
                16711,
                49250,
                13946,
                31980,
                622,
                64696,
                61418,
                40641,
                54739,
                41441,
                23025,
                60605,
                56706,
                49552,
                2919,
                19285,
                7635,
                3257,
                2125,
                19928,
                27483,
                58547,
                12570,
                40427,
                55865,
                46185,
                21874,
                56408,
                44374,
                27767,
                47882,
                30957,
                55424,
                10518,
                27106,
                38213,
                13338,
                34624,
                16427,
                16811,
                16570,
                586,
                24871,
                61306,
                56926,
                7892,
                8970,
                31233,
                37060,
                7914,
                56060,
                19600,
                1512,
                11061,
                48192,
                9509,
                50208,
                8121,
                35089,
                44202,
                33967,
                1907,
                27118,
                37784,
                56645,
                45380,
                52833,
                47590,
                968,
                56260,
                38736,
                57026,
                19820,
                20042,
                63181,
                29522,
                64134,
                11345,
                8125,
                13262,
                61139,
                15045,
                56307,
                23892,
                60107,
                10350,
                53683,
                53926,
                20847,
                22240,
                37705,
                3297,
                60321,
                61283,
                45392,
                32130,
                33253,
                14262,
                18328,
                14329,
                5893,
                45418,
                54800,
                50814,
                15523,
                34428,
                33497,
                30477,
                16914,
                13172,
                13739,
                16272,
                21506,
                56242,
                25049,
                6938,
                29186,
                61709,
                36923,
                8538,
                58259,
                55040,
                286,
                40229,
                32552,
                14443,
                60565,
                2129,
                1642,
                4806,
                32798,
                63395,
                20549,
                330,
                2342,
                45891,
                40484,
                17897,
                18189,
                37146,
                32048,
                28527,
                27921,
                54995,
                25032,
                9745,
                36632,
                17751,
                18994,
                3119,
                33613,
                3241,
                11029,
                58069,
                11110,
                62028,
                27267,
                1496,
                30422,
                28349,
                12924,
                18386,
                28963,
                25640,
                5514,
                3759,
                22224,
                32348,
                6526,
                37907,
                12552,
                3544,
                33644,
                26349,
                797,
                6431,
                54465,
                55566,
                20547,
                27617,
                35043,
                21949,
                19365,
                22615,
                11633,
                61702,
                39334,
                19776,
                21609,
                26462,
                36,
                57061,
                24741,
                59133,
                57787,
                22361,
                65373,
                29117,
                45888,
                33964,
                19396,
                10863,
                58957,
                35932,
                41059,
                676,
                15553,
                17167,
                5268,
                10313,
                15367,
                47120,
                51748,
                48416,
                2697,
                19642,
                35312,
                34757,
                58269,
                30950,
                55835,
                59478,
                54182,
                15321,
                56650,
                39488,
                47899,
                28053,
                43159,
                59577,
                58885,
                41096,
                16073,
                29592,
                55016,
                17848,
                46208,
                20350,
                9404,
                65247,
                57865,
                58872,
                22245,
                56318,
                44067,
                51320,
                1184,
                6678,
                34691,
                59605,
                40819,
                47199,
                28441,
                61633,
                52982,
                42338,
                55056,
                10588,
                24118,
                32370,
                228,
                42896,
                10142,
                51838,
                20786,
                41781,
                56454,
                17135,
                32276,
                17224,
                37223,
                55054,
                58450,
                17203,
                27665,
                25285,
                45890,
                4757,
                22121,
                47598,
                57996,
                57978,
                39376,
                59968,
                47624,
                61976,
                24130
            ]);

            console.info('SensorsData \n');
        }

        class Communication_test extends _Host_root.Communication {
            onDeviceVersion(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onDeviceVersion(cur.as_pack(_Host.DeviceVersion.impl_));
            }
            onBusConfiguration(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onBusConfiguration(cur.as_pack(_Host.BusConfiguration.impl_));
            }
            onInstructionsPack(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onInstructionsPack(cur.as_pack(_Host.InstructionsPack.impl_));
            }
            onDeviceError(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onDeviceError(cur.as_pack(_Host.DeviceError.impl_));
            }
            onSensorsData(pack: _Pack) {
                let cur = _Config.Cursor();
                cur.wrap(pack);
                _Test.onSensorsData(cur.as_pack(_Host.SensorsData.impl_));
            }
            sendingPack: _Pack | null = null;
            pullSendingPack(): _Pack | null {
                let pack = this.sendingPack;
                this.sendingPack = null;
                return pack;
            }
            pushSendingPack(pack: _Pack): boolean {
                if (this.sendingPack) return false;
                this.sendingPack = pack;
                return true;
            }
        }

        export function Main() {
            let cur = _Config.Cursor();
            let cur_dst = _Config.Cursor();
            let Communication_instance = new Communication_test();

            console.info('-------------------- DeviceVersion -------------------------');

            fill_DeviceVersion(TestChannel.NEW.DeviceVersion(cur));
            let p0 = cur.as_pack(_Host.DeviceVersion.impl_);
            onDeviceVersion(p0);
            {
                cur_dst.wrap(_Host.DeviceVersion.meta_);
                let dst = cur_dst.as_pack(_Test.DeviceVersion.impl_);
                _Host.DeviceVersion.push_(p0, new DeviceVersion.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);
            }

            if (TestChannel.send(p0)) _Lib.Channel.bytes_transfer(TestChannel.transmitterStd, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- Stop -------------------------');

            if (Communication_instance.sendStop()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- Start -------------------------');

            if (Communication_instance.sendStart()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- GetDeviceVersion -------------------------');

            if (Communication_instance.sendGetDeviceVersion()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- GetConfiguration -------------------------');

            if (Communication_instance.sendGetConfiguration()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- SetConfiguration -------------------------');

            if (Communication_instance.sendSetConfiguration()) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, TestChannel.receiverStd);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- BusConfiguration -------------------------');

            let p6 = _Host_root.Communication.NEW.BusConfiguration(cur);
            fill_BusConfiguration(p6);
            onBusConfiguration(p6);
            {
                let dst = _Host_root.Communication.NEW.BusConfiguration(cur_dst);
                _Host.BusConfiguration.push_(p6, new BusConfiguration.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);

                dst = _Host_root.Communication.NEW.BusConfiguration(cur_dst);
                _Host.BusConfiguration.pull_(new BusConfiguration.Src_adapter(p6), dst);
                const problem2 = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem2) throw new Error('not equals at ' + problem2);
            }

            if (Communication_instance.send(p6)) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- InstructionsPack -------------------------');

            let p7 = _Host_root.Communication.NEW.InstructionsPack(cur);
            fill_InstructionsPack(p7);
            onInstructionsPack(p7);
            {
                let dst = _Host_root.Communication.NEW.InstructionsPack(cur_dst);
                _Host.InstructionsPack.push_(p7, new InstructionsPack.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);

                dst = _Host_root.Communication.NEW.InstructionsPack(cur_dst);
                _Host.InstructionsPack.pull_(new InstructionsPack.Src_adapter(p7), dst);
                const problem2 = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem2) throw new Error('not equals at ' + problem2);
            }

            if (Communication_instance.send(p7)) _Lib.Channel.bytes_transfer(Communication_instance.transmitter, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- DeviceError -------------------------');

            fill_DeviceError(TestChannel.NEW.DeviceError(cur));
            let p8 = cur.as_pack(_Host.DeviceError.impl_);
            onDeviceError(p8);
            {
                cur_dst.wrap(_Host.DeviceError.meta_);
                let dst = cur_dst.as_pack(_Test.DeviceError.impl_);
                _Host.DeviceError.push_(p8, new DeviceError.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);
            }

            if (TestChannel.send(p8)) _Lib.Channel.bytes_transfer(TestChannel.transmitterStd, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');

            console.info('-------------------- SensorsData -------------------------');

            fill_SensorsData(TestChannel.NEW.SensorsData(cur));
            let p9 = cur.as_pack(_Host.SensorsData.impl_);
            onSensorsData(p9);
            {
                cur_dst.wrap(_Host.SensorsData.meta_);
                let dst = cur_dst.as_pack(_Test.SensorsData.impl_);
                _Host.SensorsData.push_(p9, new SensorsData.Dst_adapter(dst));
                const problem = _Lib.ArrayEquals(cur.bytes.buffer, 0, cur_dst.bytes.buffer, 0, cur.bytes.buffer.byteLength);
                if (problem) throw new Error('not equals at ' + problem);
            }

            if (TestChannel.send(p9)) _Lib.Channel.bytes_transfer(TestChannel.transmitterStd, Communication_instance.receiver);
            else throw new Error('error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW');
        }
    }
}
org.unirail.Test_.Main();
